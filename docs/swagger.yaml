basePath: /api
consumes:
- application/json
definitions:
  dao.Company:
    properties:
      inn:
        example: "7707083893"
        type: string
      name:
        example: ООО 'Парк'
        type: string
      website:
        example: https://www.rusprofile.ru
        type: string
    required:
    - inn
    type: object
  dao.Me:
    properties:
      biography:
        example: I'd like to relax
        type: string
      city:
        example: Москва
        type: string
      country:
        example: Россия
        type: string
      email:
        example: myemail@gmail.com
        type: string
      fatherName:
        example: Ivanovich
        type: string
      firstName:
        example: Ivan
        type: string
      inn:
        example: "7707083893"
        type: string
      lastName:
        example: Ivanov
        type: string
      name:
        example: user94
        type: string
      position:
        example: Director
        type: string
    type: object
  dto.SignIn:
    properties:
      email:
        example: myemail@gmail.com
        type: string
      password:
        example: bob126
        maxLength: 20
        minLength: 4
        type: string
    required:
    - email
    - password
    type: object
  dto.SignUp:
    properties:
      biography:
        example: I'd like to relax
        type: string
      city:
        example: Москва
        type: string
      company:
        $ref: '#/definitions/dao.Company'
      country:
        example: Россия
        type: string
      email:
        example: myemail@gmail.com
        type: string
      fatherName:
        example: Ivanovich
        type: string
      firstName:
        example: Ivan
        maxLength: 30
        minLength: 2
        type: string
      lastName:
        example: Ivanov
        maxLength: 30
        minLength: 2
        type: string
      password:
        example: bob126
        maxLength: 20
        minLength: 4
        type: string
      position:
        example: Director
        type: string
    required:
    - email
    - firstName
    - lastName
    - password
    type: object
  dto.UpdateUser:
    properties:
      biography:
        example: I'd like to relax
        type: string
      city:
        example: Москва
        type: string
      country:
        example: Россия
        type: string
      fatherName:
        example: Ivanovich
        type: string
      position:
        example: Director
        type: string
    type: object
  errs.MyError:
    description: All native errors must be this type
    properties:
      advice:
        example: Try to send request later
        type: string
      message:
        example: Exception was occurred
        type: string
    type: object
info:
  contact:
    email: matvey-sizov@mail.ru
    name: Contact us
    url: https://github.com/while-act/hackathon-backend/issues/new/choose
  description: It's an API interacting with While.act using Golang
  title: While.act API
  version: "1.0"
paths:
  /auth/session:
    get:
      description: Returns detail information about me
      responses:
        "200":
          description: Info about session
          schema:
            $ref: '#/definitions/dao.Me'
        "401":
          description: User isn't logged in
          schema:
            $ref: '#/definitions/errs.MyError'
        "404":
          description: User doesn't exist
          schema:
            $ref: '#/definitions/errs.MyError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errs.MyError'
      security:
      - ApiKeyAuth: []
      summary: Get detail data about the user by jwt
      tags:
      - User
  /auth/sign-in:
    post:
      description: Compare the user's password with an existing user's password. If
        it matches, create session of this user
      parameters:
      - description: User's email, password
        in: body
        name: SignIn
        required: true
        schema:
          $ref: '#/definitions/dto.SignIn'
      responses:
        "200":
          description: user's session
          schema:
            type: string
        "400":
          description: Data is not valid
          schema:
            $ref: '#/definitions/errs.MyError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errs.MyError'
      summary: Sign in by password
      tags:
      - Authorization
  /auth/sign-up:
    post:
      description: Compare the user's password with an existing user's password. If
        it matches, create session of the user. If the user does not exist, create
        new user
      parameters:
      - description: User's email, password, firstName, lastName, inn
        in: body
        name: SignUp
        required: true
        schema:
          $ref: '#/definitions/dto.SignUp'
      responses:
        "200":
          description: user's session
          schema:
            type: string
        "400":
          description: Data is not valid
          schema:
            $ref: '#/definitions/errs.MyError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errs.MyError'
      summary: Sign up by password
      tags:
      - Authorization
  /company:
    get:
      description: Returns information about company by jwt
      responses:
        "200":
          description: Info about company
          schema:
            $ref: '#/definitions/dao.Company'
        "404":
          description: Company doesn't exist
          schema:
            $ref: '#/definitions/errs.MyError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errs.MyError'
      security:
      - ApiKeyAuth: []
      summary: Get data about company by jwt
      tags:
      - Company
  /company/{inn}:
    get:
      description: Returns information about company by INN
      parameters:
      - description: company's inn
        in: path
        name: inn
        required: true
        type: string
      responses:
        "200":
          description: Info about company
          schema:
            $ref: '#/definitions/dao.Company'
        "404":
          description: Company doesn't exist
          schema:
            $ref: '#/definitions/errs.MyError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errs.MyError'
      summary: Get data about company inn
      tags:
      - Company
  /user:
    patch:
      description: Updates user's not required info
      parameters:
      - description: Fields to update
        in: body
        name: updFields
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUser'
      responses:
        "200":
          description: Successfully Updated
        "401":
          description: User isn't logged in
          schema:
            $ref: '#/definitions/errs.MyError'
        "404":
          description: User doesn't exist
          schema:
            $ref: '#/definitions/errs.MyError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errs.MyError'
      security:
      - ApiKeyAuth: []
      summary: Update user's data
      tags:
      - User
produces:
- application/json
schemes:
- http
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
