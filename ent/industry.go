// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/while-act/hackathon-backend/ent/industry"
)

// Industry is the model entity for the Industry schema.
type Industry struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// AvgWorkersNum holds the value of the "avg_workers_num" field.
	AvgWorkersNum float64 `json:"avg_workers_num,omitempty"`
	// AvgWorkersNumCad holds the value of the "avg_workers_num_cad" field.
	AvgWorkersNumCad float64 `json:"avg_workers_num_cad,omitempty"`
	// AvgSalary holds the value of the "avg_salary" field.
	AvgSalary float64 `json:"avg_salary,omitempty"`
	// AvgSalaryCad holds the value of the "avg_salary_cad" field.
	AvgSalaryCad float64 `json:"avg_salary_cad,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IndustryQuery when eager-loading is set.
	Edges        IndustryEdges `json:"edges"`
	selectValues sql.SelectValues
}

// IndustryEdges holds the relations/edges for other nodes in the graph.
type IndustryEdges struct {
	// Histories holds the value of the histories edge.
	Histories []*History `json:"histories,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// HistoriesOrErr returns the Histories value or an error if the edge
// was not loaded in eager-loading.
func (e IndustryEdges) HistoriesOrErr() ([]*History, error) {
	if e.loadedTypes[0] {
		return e.Histories, nil
	}
	return nil, &NotLoadedError{edge: "histories"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Industry) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case industry.FieldAvgWorkersNum, industry.FieldAvgWorkersNumCad, industry.FieldAvgSalary, industry.FieldAvgSalaryCad:
			values[i] = new(sql.NullFloat64)
		case industry.FieldID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Industry fields.
func (i *Industry) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case industry.FieldID:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[j])
			} else if value.Valid {
				i.ID = value.String
			}
		case industry.FieldAvgWorkersNum:
			if value, ok := values[j].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field avg_workers_num", values[j])
			} else if value.Valid {
				i.AvgWorkersNum = value.Float64
			}
		case industry.FieldAvgWorkersNumCad:
			if value, ok := values[j].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field avg_workers_num_cad", values[j])
			} else if value.Valid {
				i.AvgWorkersNumCad = value.Float64
			}
		case industry.FieldAvgSalary:
			if value, ok := values[j].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field avg_salary", values[j])
			} else if value.Valid {
				i.AvgSalary = value.Float64
			}
		case industry.FieldAvgSalaryCad:
			if value, ok := values[j].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field avg_salary_cad", values[j])
			} else if value.Valid {
				i.AvgSalaryCad = value.Float64
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Industry.
// This includes values selected through modifiers, order, etc.
func (i *Industry) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// QueryHistories queries the "histories" edge of the Industry entity.
func (i *Industry) QueryHistories() *HistoryQuery {
	return NewIndustryClient(i.config).QueryHistories(i)
}

// Update returns a builder for updating this Industry.
// Note that you need to call Industry.Unwrap() before calling this method if this Industry
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Industry) Update() *IndustryUpdateOne {
	return NewIndustryClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Industry entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Industry) Unwrap() *Industry {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Industry is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Industry) String() string {
	var builder strings.Builder
	builder.WriteString("Industry(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("avg_workers_num=")
	builder.WriteString(fmt.Sprintf("%v", i.AvgWorkersNum))
	builder.WriteString(", ")
	builder.WriteString("avg_workers_num_cad=")
	builder.WriteString(fmt.Sprintf("%v", i.AvgWorkersNumCad))
	builder.WriteString(", ")
	builder.WriteString("avg_salary=")
	builder.WriteString(fmt.Sprintf("%v", i.AvgSalary))
	builder.WriteString(", ")
	builder.WriteString("avg_salary_cad=")
	builder.WriteString(fmt.Sprintf("%v", i.AvgSalaryCad))
	builder.WriteByte(')')
	return builder.String()
}

// Industries is a parsable slice of Industry.
type Industries []*Industry
