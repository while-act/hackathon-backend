// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/while-act/hackathon-backend/ent/equipment"
)

// Equipment is the model entity for the Equipment schema.
type Equipment struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// AvgPriceDol holds the value of the "avg_price_dol" field.
	AvgPriceDol float64 `json:"avg_price_dol,omitempty"`
	// AvgPriceRub holds the value of the "avg_price_rub" field.
	AvgPriceRub float64 `json:"avg_price_rub,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EquipmentQuery when eager-loading is set.
	Edges        EquipmentEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EquipmentEdges holds the relations/edges for other nodes in the graph.
type EquipmentEdges struct {
	// Histories holds the value of the histories edge.
	Histories []*History `json:"histories,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// HistoriesOrErr returns the Histories value or an error if the edge
// was not loaded in eager-loading.
func (e EquipmentEdges) HistoriesOrErr() ([]*History, error) {
	if e.loadedTypes[0] {
		return e.Histories, nil
	}
	return nil, &NotLoadedError{edge: "histories"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Equipment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case equipment.FieldAvgPriceDol, equipment.FieldAvgPriceRub:
			values[i] = new(sql.NullFloat64)
		case equipment.FieldID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Equipment fields.
func (e *Equipment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case equipment.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				e.ID = value.String
			}
		case equipment.FieldAvgPriceDol:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field avg_price_dol", values[i])
			} else if value.Valid {
				e.AvgPriceDol = value.Float64
			}
		case equipment.FieldAvgPriceRub:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field avg_price_rub", values[i])
			} else if value.Valid {
				e.AvgPriceRub = value.Float64
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Equipment.
// This includes values selected through modifiers, order, etc.
func (e *Equipment) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// QueryHistories queries the "histories" edge of the Equipment entity.
func (e *Equipment) QueryHistories() *HistoryQuery {
	return NewEquipmentClient(e.config).QueryHistories(e)
}

// Update returns a builder for updating this Equipment.
// Note that you need to call Equipment.Unwrap() before calling this method if this Equipment
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Equipment) Update() *EquipmentUpdateOne {
	return NewEquipmentClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Equipment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Equipment) Unwrap() *Equipment {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Equipment is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Equipment) String() string {
	var builder strings.Builder
	builder.WriteString("Equipment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("avg_price_dol=")
	builder.WriteString(fmt.Sprintf("%v", e.AvgPriceDol))
	builder.WriteString(", ")
	builder.WriteString("avg_price_rub=")
	builder.WriteString(fmt.Sprintf("%v", e.AvgPriceRub))
	builder.WriteByte(')')
	return builder.String()
}

// EquipmentSlice is a parsable slice of Equipment.
type EquipmentSlice []*Equipment
