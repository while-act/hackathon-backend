// Code generated by ent, DO NOT EDIT.

package runtime

import (
	"time"

	"github.com/wtkeqrf0/while.act/ent/company"
	"github.com/wtkeqrf0/while.act/ent/schema"
	"github.com/wtkeqrf0/while.act/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	companyFields := schema.Company{}.Fields()
	_ = companyFields
	// companyDescInn is the schema descriptor for inn field.
	companyDescInn := companyFields[1].Descriptor()
	// company.InnValidator is a validator for the "inn" field. It is called by the builders before save.
	company.InnValidator = companyDescInn.Validators[0].(func(string) error)
	// companyDescName is the schema descriptor for name field.
	companyDescName := companyFields[2].Descriptor()
	// company.NameValidator is a validator for the "name" field. It is called by the builders before save.
	company.NameValidator = func() func(string) error {
		validators := companyDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// companyDescWebsite is the schema descriptor for website field.
	companyDescWebsite := companyFields[3].Descriptor()
	// company.WebsiteValidator is a validator for the "website" field. It is called by the builders before save.
	company.WebsiteValidator = companyDescWebsite.Validators[0].(func(string) error)
	userMixin := schema.User{}.Mixin()
	userHooks := schema.User{}.Hooks()
	user.Hooks[0] = userHooks[0]
	userMixinFields0 := userMixin[0].Fields()
	_ = userMixinFields0
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreateTime is the schema descriptor for create_time field.
	userDescCreateTime := userMixinFields0[0].Descriptor()
	// user.DefaultCreateTime holds the default value on creation for the create_time field.
	user.DefaultCreateTime = userDescCreateTime.Default.(func() time.Time)
	// userDescUpdateTime is the schema descriptor for update_time field.
	userDescUpdateTime := userMixinFields0[1].Descriptor()
	// user.DefaultUpdateTime holds the default value on creation for the update_time field.
	user.DefaultUpdateTime = userDescUpdateTime.Default.(func() time.Time)
	// user.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	user.UpdateDefaultUpdateTime = userDescUpdateTime.UpdateDefault.(func() time.Time)
	// userDescRole is the schema descriptor for role field.
	userDescRole := userFields[1].Descriptor()
	// user.DefaultRole holds the default value on creation for the role field.
	user.DefaultRole = userDescRole.Default.(string)
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[2].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = userDescName.Validators[0].(func(string) error)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[4].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
	// userDescFirstName is the schema descriptor for first_name field.
	userDescFirstName := userFields[5].Descriptor()
	// user.FirstNameValidator is a validator for the "first_name" field. It is called by the builders before save.
	user.FirstNameValidator = func() func(string) error {
		validators := userDescFirstName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(first_name string) error {
			for _, fn := range fns {
				if err := fn(first_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescLastName is the schema descriptor for last_name field.
	userDescLastName := userFields[6].Descriptor()
	// user.LastNameValidator is a validator for the "last_name" field. It is called by the builders before save.
	user.LastNameValidator = func() func(string) error {
		validators := userDescLastName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(last_name string) error {
			for _, fn := range fns {
				if err := fn(last_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescFatherName is the schema descriptor for father_name field.
	userDescFatherName := userFields[8].Descriptor()
	// user.FatherNameValidator is a validator for the "father_name" field. It is called by the builders before save.
	user.FatherNameValidator = func() func(string) error {
		validators := userDescFatherName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(father_name string) error {
			for _, fn := range fns {
				if err := fn(father_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescPosition is the schema descriptor for position field.
	userDescPosition := userFields[9].Descriptor()
	// user.PositionValidator is a validator for the "position" field. It is called by the builders before save.
	user.PositionValidator = func() func(string) error {
		validators := userDescPosition.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(position string) error {
			for _, fn := range fns {
				if err := fn(position); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescCountry is the schema descriptor for country field.
	userDescCountry := userFields[10].Descriptor()
	// user.CountryValidator is a validator for the "country" field. It is called by the builders before save.
	user.CountryValidator = userDescCountry.Validators[0].(func(string) error)
	// userDescCity is the schema descriptor for city field.
	userDescCity := userFields[11].Descriptor()
	// user.CityValidator is a validator for the "city" field. It is called by the builders before save.
	user.CityValidator = userDescCity.Validators[0].(func(string) error)
	// userDescBiography is the schema descriptor for biography field.
	userDescBiography := userFields[12].Descriptor()
	// user.BiographyValidator is a validator for the "biography" field. It is called by the builders before save.
	user.BiographyValidator = userDescBiography.Validators[0].(func(string) error)
}

const (
	Version = "v0.12.3"                                         // Version of ent codegen.
	Sum     = "h1:N5lO2EOrHpCH5HYfiMOCHYbo+oh5M8GjT0/cx5x6xkk=" // Sum of ent codegen.
)
