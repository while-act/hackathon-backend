// Code generated by ent, DO NOT EDIT.

package industry

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the industry type in the database.
	Label = "industry"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "branch"
	// FieldAvgWorkersNum holds the string denoting the avg_workers_num field in the database.
	FieldAvgWorkersNum = "avg_workers_num"
	// FieldAvgWorkersNumCad holds the string denoting the avg_workers_num_cad field in the database.
	FieldAvgWorkersNumCad = "avg_workers_num_cad"
	// FieldAvgSalary holds the string denoting the avg_salary field in the database.
	FieldAvgSalary = "avg_salary"
	// FieldAvgSalaryCad holds the string denoting the avg_salary_cad field in the database.
	FieldAvgSalaryCad = "avg_salary_cad"
	// EdgeHistories holds the string denoting the histories edge name in mutations.
	EdgeHistories = "histories"
	// HistoryFieldID holds the string denoting the ID field of the History.
	HistoryFieldID = "id"
	// Table holds the table name of the industry in the database.
	Table = "industries"
	// HistoriesTable is the table that holds the histories relation/edge.
	HistoriesTable = "histories"
	// HistoriesInverseTable is the table name for the History entity.
	// It exists in this package in order to avoid circular dependency with the "history" package.
	HistoriesInverseTable = "histories"
	// HistoriesColumn is the table column denoting the histories relation/edge.
	HistoriesColumn = "industry_branch"
)

// Columns holds all SQL columns for industry fields.
var Columns = []string{
	FieldID,
	FieldAvgWorkersNum,
	FieldAvgWorkersNumCad,
	FieldAvgSalary,
	FieldAvgSalaryCad,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// AvgWorkersNumValidator is a validator for the "avg_workers_num" field. It is called by the builders before save.
	AvgWorkersNumValidator func(float64) error
	// AvgWorkersNumCadValidator is a validator for the "avg_workers_num_cad" field. It is called by the builders before save.
	AvgWorkersNumCadValidator func(float64) error
	// AvgSalaryValidator is a validator for the "avg_salary" field. It is called by the builders before save.
	AvgSalaryValidator func(float64) error
	// AvgSalaryCadValidator is a validator for the "avg_salary_cad" field. It is called by the builders before save.
	AvgSalaryCadValidator func(float64) error
)

// OrderOption defines the ordering options for the Industry queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAvgWorkersNum orders the results by the avg_workers_num field.
func ByAvgWorkersNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvgWorkersNum, opts...).ToFunc()
}

// ByAvgWorkersNumCad orders the results by the avg_workers_num_cad field.
func ByAvgWorkersNumCad(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvgWorkersNumCad, opts...).ToFunc()
}

// ByAvgSalary orders the results by the avg_salary field.
func ByAvgSalary(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvgSalary, opts...).ToFunc()
}

// ByAvgSalaryCad orders the results by the avg_salary_cad field.
func ByAvgSalaryCad(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvgSalaryCad, opts...).ToFunc()
}

// ByHistoriesCount orders the results by histories count.
func ByHistoriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHistoriesStep(), opts...)
	}
}

// ByHistories orders the results by histories terms.
func ByHistories(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHistoriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newHistoriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HistoriesInverseTable, HistoryFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, HistoriesTable, HistoriesColumn),
	)
}
