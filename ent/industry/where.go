// Code generated by ent, DO NOT EDIT.

package industry

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/while-act/hackathon-backend/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Industry {
	return predicate.Industry(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Industry {
	return predicate.Industry(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Industry {
	return predicate.Industry(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Industry {
	return predicate.Industry(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Industry {
	return predicate.Industry(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Industry {
	return predicate.Industry(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Industry {
	return predicate.Industry(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Industry {
	return predicate.Industry(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Industry {
	return predicate.Industry(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Industry {
	return predicate.Industry(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Industry {
	return predicate.Industry(sql.FieldContainsFold(FieldID, id))
}

// AvgWorkersNum applies equality check predicate on the "avg_workers_num" field. It's identical to AvgWorkersNumEQ.
func AvgWorkersNum(v float64) predicate.Industry {
	return predicate.Industry(sql.FieldEQ(FieldAvgWorkersNum, v))
}

// AvgWorkersNumCad applies equality check predicate on the "avg_workers_num_cad" field. It's identical to AvgWorkersNumCadEQ.
func AvgWorkersNumCad(v float64) predicate.Industry {
	return predicate.Industry(sql.FieldEQ(FieldAvgWorkersNumCad, v))
}

// AvgSalary applies equality check predicate on the "avg_salary" field. It's identical to AvgSalaryEQ.
func AvgSalary(v float64) predicate.Industry {
	return predicate.Industry(sql.FieldEQ(FieldAvgSalary, v))
}

// AvgSalaryCad applies equality check predicate on the "avg_salary_cad" field. It's identical to AvgSalaryCadEQ.
func AvgSalaryCad(v float64) predicate.Industry {
	return predicate.Industry(sql.FieldEQ(FieldAvgSalaryCad, v))
}

// AvgWorkersNumEQ applies the EQ predicate on the "avg_workers_num" field.
func AvgWorkersNumEQ(v float64) predicate.Industry {
	return predicate.Industry(sql.FieldEQ(FieldAvgWorkersNum, v))
}

// AvgWorkersNumNEQ applies the NEQ predicate on the "avg_workers_num" field.
func AvgWorkersNumNEQ(v float64) predicate.Industry {
	return predicate.Industry(sql.FieldNEQ(FieldAvgWorkersNum, v))
}

// AvgWorkersNumIn applies the In predicate on the "avg_workers_num" field.
func AvgWorkersNumIn(vs ...float64) predicate.Industry {
	return predicate.Industry(sql.FieldIn(FieldAvgWorkersNum, vs...))
}

// AvgWorkersNumNotIn applies the NotIn predicate on the "avg_workers_num" field.
func AvgWorkersNumNotIn(vs ...float64) predicate.Industry {
	return predicate.Industry(sql.FieldNotIn(FieldAvgWorkersNum, vs...))
}

// AvgWorkersNumGT applies the GT predicate on the "avg_workers_num" field.
func AvgWorkersNumGT(v float64) predicate.Industry {
	return predicate.Industry(sql.FieldGT(FieldAvgWorkersNum, v))
}

// AvgWorkersNumGTE applies the GTE predicate on the "avg_workers_num" field.
func AvgWorkersNumGTE(v float64) predicate.Industry {
	return predicate.Industry(sql.FieldGTE(FieldAvgWorkersNum, v))
}

// AvgWorkersNumLT applies the LT predicate on the "avg_workers_num" field.
func AvgWorkersNumLT(v float64) predicate.Industry {
	return predicate.Industry(sql.FieldLT(FieldAvgWorkersNum, v))
}

// AvgWorkersNumLTE applies the LTE predicate on the "avg_workers_num" field.
func AvgWorkersNumLTE(v float64) predicate.Industry {
	return predicate.Industry(sql.FieldLTE(FieldAvgWorkersNum, v))
}

// AvgWorkersNumCadEQ applies the EQ predicate on the "avg_workers_num_cad" field.
func AvgWorkersNumCadEQ(v float64) predicate.Industry {
	return predicate.Industry(sql.FieldEQ(FieldAvgWorkersNumCad, v))
}

// AvgWorkersNumCadNEQ applies the NEQ predicate on the "avg_workers_num_cad" field.
func AvgWorkersNumCadNEQ(v float64) predicate.Industry {
	return predicate.Industry(sql.FieldNEQ(FieldAvgWorkersNumCad, v))
}

// AvgWorkersNumCadIn applies the In predicate on the "avg_workers_num_cad" field.
func AvgWorkersNumCadIn(vs ...float64) predicate.Industry {
	return predicate.Industry(sql.FieldIn(FieldAvgWorkersNumCad, vs...))
}

// AvgWorkersNumCadNotIn applies the NotIn predicate on the "avg_workers_num_cad" field.
func AvgWorkersNumCadNotIn(vs ...float64) predicate.Industry {
	return predicate.Industry(sql.FieldNotIn(FieldAvgWorkersNumCad, vs...))
}

// AvgWorkersNumCadGT applies the GT predicate on the "avg_workers_num_cad" field.
func AvgWorkersNumCadGT(v float64) predicate.Industry {
	return predicate.Industry(sql.FieldGT(FieldAvgWorkersNumCad, v))
}

// AvgWorkersNumCadGTE applies the GTE predicate on the "avg_workers_num_cad" field.
func AvgWorkersNumCadGTE(v float64) predicate.Industry {
	return predicate.Industry(sql.FieldGTE(FieldAvgWorkersNumCad, v))
}

// AvgWorkersNumCadLT applies the LT predicate on the "avg_workers_num_cad" field.
func AvgWorkersNumCadLT(v float64) predicate.Industry {
	return predicate.Industry(sql.FieldLT(FieldAvgWorkersNumCad, v))
}

// AvgWorkersNumCadLTE applies the LTE predicate on the "avg_workers_num_cad" field.
func AvgWorkersNumCadLTE(v float64) predicate.Industry {
	return predicate.Industry(sql.FieldLTE(FieldAvgWorkersNumCad, v))
}

// AvgSalaryEQ applies the EQ predicate on the "avg_salary" field.
func AvgSalaryEQ(v float64) predicate.Industry {
	return predicate.Industry(sql.FieldEQ(FieldAvgSalary, v))
}

// AvgSalaryNEQ applies the NEQ predicate on the "avg_salary" field.
func AvgSalaryNEQ(v float64) predicate.Industry {
	return predicate.Industry(sql.FieldNEQ(FieldAvgSalary, v))
}

// AvgSalaryIn applies the In predicate on the "avg_salary" field.
func AvgSalaryIn(vs ...float64) predicate.Industry {
	return predicate.Industry(sql.FieldIn(FieldAvgSalary, vs...))
}

// AvgSalaryNotIn applies the NotIn predicate on the "avg_salary" field.
func AvgSalaryNotIn(vs ...float64) predicate.Industry {
	return predicate.Industry(sql.FieldNotIn(FieldAvgSalary, vs...))
}

// AvgSalaryGT applies the GT predicate on the "avg_salary" field.
func AvgSalaryGT(v float64) predicate.Industry {
	return predicate.Industry(sql.FieldGT(FieldAvgSalary, v))
}

// AvgSalaryGTE applies the GTE predicate on the "avg_salary" field.
func AvgSalaryGTE(v float64) predicate.Industry {
	return predicate.Industry(sql.FieldGTE(FieldAvgSalary, v))
}

// AvgSalaryLT applies the LT predicate on the "avg_salary" field.
func AvgSalaryLT(v float64) predicate.Industry {
	return predicate.Industry(sql.FieldLT(FieldAvgSalary, v))
}

// AvgSalaryLTE applies the LTE predicate on the "avg_salary" field.
func AvgSalaryLTE(v float64) predicate.Industry {
	return predicate.Industry(sql.FieldLTE(FieldAvgSalary, v))
}

// AvgSalaryCadEQ applies the EQ predicate on the "avg_salary_cad" field.
func AvgSalaryCadEQ(v float64) predicate.Industry {
	return predicate.Industry(sql.FieldEQ(FieldAvgSalaryCad, v))
}

// AvgSalaryCadNEQ applies the NEQ predicate on the "avg_salary_cad" field.
func AvgSalaryCadNEQ(v float64) predicate.Industry {
	return predicate.Industry(sql.FieldNEQ(FieldAvgSalaryCad, v))
}

// AvgSalaryCadIn applies the In predicate on the "avg_salary_cad" field.
func AvgSalaryCadIn(vs ...float64) predicate.Industry {
	return predicate.Industry(sql.FieldIn(FieldAvgSalaryCad, vs...))
}

// AvgSalaryCadNotIn applies the NotIn predicate on the "avg_salary_cad" field.
func AvgSalaryCadNotIn(vs ...float64) predicate.Industry {
	return predicate.Industry(sql.FieldNotIn(FieldAvgSalaryCad, vs...))
}

// AvgSalaryCadGT applies the GT predicate on the "avg_salary_cad" field.
func AvgSalaryCadGT(v float64) predicate.Industry {
	return predicate.Industry(sql.FieldGT(FieldAvgSalaryCad, v))
}

// AvgSalaryCadGTE applies the GTE predicate on the "avg_salary_cad" field.
func AvgSalaryCadGTE(v float64) predicate.Industry {
	return predicate.Industry(sql.FieldGTE(FieldAvgSalaryCad, v))
}

// AvgSalaryCadLT applies the LT predicate on the "avg_salary_cad" field.
func AvgSalaryCadLT(v float64) predicate.Industry {
	return predicate.Industry(sql.FieldLT(FieldAvgSalaryCad, v))
}

// AvgSalaryCadLTE applies the LTE predicate on the "avg_salary_cad" field.
func AvgSalaryCadLTE(v float64) predicate.Industry {
	return predicate.Industry(sql.FieldLTE(FieldAvgSalaryCad, v))
}

// HasHistories applies the HasEdge predicate on the "histories" edge.
func HasHistories() predicate.Industry {
	return predicate.Industry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HistoriesTable, HistoriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHistoriesWith applies the HasEdge predicate on the "histories" edge with a given conditions (other predicates).
func HasHistoriesWith(preds ...predicate.History) predicate.Industry {
	return predicate.Industry(func(s *sql.Selector) {
		step := newHistoriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Industry) predicate.Industry {
	return predicate.Industry(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Industry) predicate.Industry {
	return predicate.Industry(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Industry) predicate.Industry {
	return predicate.Industry(func(s *sql.Selector) {
		p(s.Not())
	})
}
