// Code generated by ent, DO NOT EDIT.

package taxationsystem

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/while-act/hackathon-backend/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.TaxationSystem {
	return predicate.TaxationSystem(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.TaxationSystem {
	return predicate.TaxationSystem(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.TaxationSystem {
	return predicate.TaxationSystem(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.TaxationSystem {
	return predicate.TaxationSystem(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.TaxationSystem {
	return predicate.TaxationSystem(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.TaxationSystem {
	return predicate.TaxationSystem(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.TaxationSystem {
	return predicate.TaxationSystem(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.TaxationSystem {
	return predicate.TaxationSystem(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.TaxationSystem {
	return predicate.TaxationSystem(sql.FieldLTE(FieldID, id))
}

// Usn6 applies equality check predicate on the "usn6" field. It's identical to Usn6EQ.
func Usn6(v float64) predicate.TaxationSystem {
	return predicate.TaxationSystem(sql.FieldEQ(FieldUsn6, v))
}

// Usn15 applies equality check predicate on the "usn15" field. It's identical to Usn15EQ.
func Usn15(v float64) predicate.TaxationSystem {
	return predicate.TaxationSystem(sql.FieldEQ(FieldUsn15, v))
}

// Osn applies equality check predicate on the "osn" field. It's identical to OsnEQ.
func Osn(v float64) predicate.TaxationSystem {
	return predicate.TaxationSystem(sql.FieldEQ(FieldOsn, v))
}

// Usn6EQ applies the EQ predicate on the "usn6" field.
func Usn6EQ(v float64) predicate.TaxationSystem {
	return predicate.TaxationSystem(sql.FieldEQ(FieldUsn6, v))
}

// Usn6NEQ applies the NEQ predicate on the "usn6" field.
func Usn6NEQ(v float64) predicate.TaxationSystem {
	return predicate.TaxationSystem(sql.FieldNEQ(FieldUsn6, v))
}

// Usn6In applies the In predicate on the "usn6" field.
func Usn6In(vs ...float64) predicate.TaxationSystem {
	return predicate.TaxationSystem(sql.FieldIn(FieldUsn6, vs...))
}

// Usn6NotIn applies the NotIn predicate on the "usn6" field.
func Usn6NotIn(vs ...float64) predicate.TaxationSystem {
	return predicate.TaxationSystem(sql.FieldNotIn(FieldUsn6, vs...))
}

// Usn6GT applies the GT predicate on the "usn6" field.
func Usn6GT(v float64) predicate.TaxationSystem {
	return predicate.TaxationSystem(sql.FieldGT(FieldUsn6, v))
}

// Usn6GTE applies the GTE predicate on the "usn6" field.
func Usn6GTE(v float64) predicate.TaxationSystem {
	return predicate.TaxationSystem(sql.FieldGTE(FieldUsn6, v))
}

// Usn6LT applies the LT predicate on the "usn6" field.
func Usn6LT(v float64) predicate.TaxationSystem {
	return predicate.TaxationSystem(sql.FieldLT(FieldUsn6, v))
}

// Usn6LTE applies the LTE predicate on the "usn6" field.
func Usn6LTE(v float64) predicate.TaxationSystem {
	return predicate.TaxationSystem(sql.FieldLTE(FieldUsn6, v))
}

// Usn15EQ applies the EQ predicate on the "usn15" field.
func Usn15EQ(v float64) predicate.TaxationSystem {
	return predicate.TaxationSystem(sql.FieldEQ(FieldUsn15, v))
}

// Usn15NEQ applies the NEQ predicate on the "usn15" field.
func Usn15NEQ(v float64) predicate.TaxationSystem {
	return predicate.TaxationSystem(sql.FieldNEQ(FieldUsn15, v))
}

// Usn15In applies the In predicate on the "usn15" field.
func Usn15In(vs ...float64) predicate.TaxationSystem {
	return predicate.TaxationSystem(sql.FieldIn(FieldUsn15, vs...))
}

// Usn15NotIn applies the NotIn predicate on the "usn15" field.
func Usn15NotIn(vs ...float64) predicate.TaxationSystem {
	return predicate.TaxationSystem(sql.FieldNotIn(FieldUsn15, vs...))
}

// Usn15GT applies the GT predicate on the "usn15" field.
func Usn15GT(v float64) predicate.TaxationSystem {
	return predicate.TaxationSystem(sql.FieldGT(FieldUsn15, v))
}

// Usn15GTE applies the GTE predicate on the "usn15" field.
func Usn15GTE(v float64) predicate.TaxationSystem {
	return predicate.TaxationSystem(sql.FieldGTE(FieldUsn15, v))
}

// Usn15LT applies the LT predicate on the "usn15" field.
func Usn15LT(v float64) predicate.TaxationSystem {
	return predicate.TaxationSystem(sql.FieldLT(FieldUsn15, v))
}

// Usn15LTE applies the LTE predicate on the "usn15" field.
func Usn15LTE(v float64) predicate.TaxationSystem {
	return predicate.TaxationSystem(sql.FieldLTE(FieldUsn15, v))
}

// OsnEQ applies the EQ predicate on the "osn" field.
func OsnEQ(v float64) predicate.TaxationSystem {
	return predicate.TaxationSystem(sql.FieldEQ(FieldOsn, v))
}

// OsnNEQ applies the NEQ predicate on the "osn" field.
func OsnNEQ(v float64) predicate.TaxationSystem {
	return predicate.TaxationSystem(sql.FieldNEQ(FieldOsn, v))
}

// OsnIn applies the In predicate on the "osn" field.
func OsnIn(vs ...float64) predicate.TaxationSystem {
	return predicate.TaxationSystem(sql.FieldIn(FieldOsn, vs...))
}

// OsnNotIn applies the NotIn predicate on the "osn" field.
func OsnNotIn(vs ...float64) predicate.TaxationSystem {
	return predicate.TaxationSystem(sql.FieldNotIn(FieldOsn, vs...))
}

// OsnGT applies the GT predicate on the "osn" field.
func OsnGT(v float64) predicate.TaxationSystem {
	return predicate.TaxationSystem(sql.FieldGT(FieldOsn, v))
}

// OsnGTE applies the GTE predicate on the "osn" field.
func OsnGTE(v float64) predicate.TaxationSystem {
	return predicate.TaxationSystem(sql.FieldGTE(FieldOsn, v))
}

// OsnLT applies the LT predicate on the "osn" field.
func OsnLT(v float64) predicate.TaxationSystem {
	return predicate.TaxationSystem(sql.FieldLT(FieldOsn, v))
}

// OsnLTE applies the LTE predicate on the "osn" field.
func OsnLTE(v float64) predicate.TaxationSystem {
	return predicate.TaxationSystem(sql.FieldLTE(FieldOsn, v))
}

// HasHistories applies the HasEdge predicate on the "histories" edge.
func HasHistories() predicate.TaxationSystem {
	return predicate.TaxationSystem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HistoriesTable, HistoriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHistoriesWith applies the HasEdge predicate on the "histories" edge with a given conditions (other predicates).
func HasHistoriesWith(preds ...predicate.History) predicate.TaxationSystem {
	return predicate.TaxationSystem(func(s *sql.Selector) {
		step := newHistoriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TaxationSystem) predicate.TaxationSystem {
	return predicate.TaxationSystem(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TaxationSystem) predicate.TaxationSystem {
	return predicate.TaxationSystem(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TaxationSystem) predicate.TaxationSystem {
	return predicate.TaxationSystem(func(s *sql.Selector) {
		p(s.Not())
	})
}
