// Code generated by ent, DO NOT EDIT.

package taxationsystem

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the taxationsystem type in the database.
	Label = "taxation_system"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "operations"
	// FieldUsn6 holds the string denoting the usn6 field in the database.
	FieldUsn6 = "usn6"
	// FieldUsn15 holds the string denoting the usn15 field in the database.
	FieldUsn15 = "usn15"
	// FieldOsn holds the string denoting the osn field in the database.
	FieldOsn = "osn"
	// EdgeHistories holds the string denoting the histories edge name in mutations.
	EdgeHistories = "histories"
	// HistoryFieldID holds the string denoting the ID field of the History.
	HistoryFieldID = "id"
	// Table holds the table name of the taxationsystem in the database.
	Table = "taxation_systems"
	// HistoriesTable is the table that holds the histories relation/edge.
	HistoriesTable = "histories"
	// HistoriesInverseTable is the table name for the History entity.
	// It exists in this package in order to avoid circular dependency with the "history" package.
	HistoriesInverseTable = "histories"
	// HistoriesColumn is the table column denoting the histories relation/edge.
	HistoriesColumn = "taxation_system_operations"
)

// Columns holds all SQL columns for taxationsystem fields.
var Columns = []string{
	FieldID,
	FieldUsn6,
	FieldUsn15,
	FieldOsn,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// Usn6Validator is a validator for the "usn6" field. It is called by the builders before save.
	Usn6Validator func(float64) error
	// Usn15Validator is a validator for the "usn15" field. It is called by the builders before save.
	Usn15Validator func(float64) error
	// OsnValidator is a validator for the "osn" field. It is called by the builders before save.
	OsnValidator func(float64) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int) error
)

// OrderOption defines the ordering options for the TaxationSystem queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUsn6 orders the results by the usn6 field.
func ByUsn6(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsn6, opts...).ToFunc()
}

// ByUsn15 orders the results by the usn15 field.
func ByUsn15(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsn15, opts...).ToFunc()
}

// ByOsn orders the results by the osn field.
func ByOsn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOsn, opts...).ToFunc()
}

// ByHistoriesCount orders the results by histories count.
func ByHistoriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHistoriesStep(), opts...)
	}
}

// ByHistories orders the results by histories terms.
func ByHistories(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHistoriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newHistoriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HistoriesInverseTable, HistoryFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, HistoriesTable, HistoriesColumn),
	)
}
