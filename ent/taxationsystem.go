// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/while-act/hackathon-backend/ent/taxationsystem"
)

// TaxationSystem is the model entity for the TaxationSystem schema.
type TaxationSystem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Usn6 holds the value of the "usn6" field.
	Usn6 float64 `json:"usn6,omitempty"`
	// Usn15 holds the value of the "usn15" field.
	Usn15 float64 `json:"usn15,omitempty"`
	// Osn holds the value of the "osn" field.
	Osn float64 `json:"osn,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TaxationSystemQuery when eager-loading is set.
	Edges        TaxationSystemEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TaxationSystemEdges holds the relations/edges for other nodes in the graph.
type TaxationSystemEdges struct {
	// Histories holds the value of the histories edge.
	Histories []*History `json:"histories,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// HistoriesOrErr returns the Histories value or an error if the edge
// was not loaded in eager-loading.
func (e TaxationSystemEdges) HistoriesOrErr() ([]*History, error) {
	if e.loadedTypes[0] {
		return e.Histories, nil
	}
	return nil, &NotLoadedError{edge: "histories"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TaxationSystem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case taxationsystem.FieldUsn6, taxationsystem.FieldUsn15, taxationsystem.FieldOsn:
			values[i] = new(sql.NullFloat64)
		case taxationsystem.FieldID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TaxationSystem fields.
func (ts *TaxationSystem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case taxationsystem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ts.ID = int(value.Int64)
		case taxationsystem.FieldUsn6:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field usn6", values[i])
			} else if value.Valid {
				ts.Usn6 = value.Float64
			}
		case taxationsystem.FieldUsn15:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field usn15", values[i])
			} else if value.Valid {
				ts.Usn15 = value.Float64
			}
		case taxationsystem.FieldOsn:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field osn", values[i])
			} else if value.Valid {
				ts.Osn = value.Float64
			}
		default:
			ts.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TaxationSystem.
// This includes values selected through modifiers, order, etc.
func (ts *TaxationSystem) Value(name string) (ent.Value, error) {
	return ts.selectValues.Get(name)
}

// QueryHistories queries the "histories" edge of the TaxationSystem entity.
func (ts *TaxationSystem) QueryHistories() *HistoryQuery {
	return NewTaxationSystemClient(ts.config).QueryHistories(ts)
}

// Update returns a builder for updating this TaxationSystem.
// Note that you need to call TaxationSystem.Unwrap() before calling this method if this TaxationSystem
// was returned from a transaction, and the transaction was committed or rolled back.
func (ts *TaxationSystem) Update() *TaxationSystemUpdateOne {
	return NewTaxationSystemClient(ts.config).UpdateOne(ts)
}

// Unwrap unwraps the TaxationSystem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ts *TaxationSystem) Unwrap() *TaxationSystem {
	_tx, ok := ts.config.driver.(*txDriver)
	if !ok {
		panic("ent: TaxationSystem is not a transactional entity")
	}
	ts.config.driver = _tx.drv
	return ts
}

// String implements the fmt.Stringer.
func (ts *TaxationSystem) String() string {
	var builder strings.Builder
	builder.WriteString("TaxationSystem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ts.ID))
	builder.WriteString("usn6=")
	builder.WriteString(fmt.Sprintf("%v", ts.Usn6))
	builder.WriteString(", ")
	builder.WriteString("usn15=")
	builder.WriteString(fmt.Sprintf("%v", ts.Usn15))
	builder.WriteString(", ")
	builder.WriteString("osn=")
	builder.WriteString(fmt.Sprintf("%v", ts.Osn))
	builder.WriteByte(')')
	return builder.String()
}

// TaxationSystems is a parsable slice of TaxationSystem.
type TaxationSystems []*TaxationSystem
