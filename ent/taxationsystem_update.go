// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/while-act/hackathon-backend/ent/history"
	"github.com/while-act/hackathon-backend/ent/predicate"
	"github.com/while-act/hackathon-backend/ent/taxationsystem"
)

// TaxationSystemUpdate is the builder for updating TaxationSystem entities.
type TaxationSystemUpdate struct {
	config
	hooks    []Hook
	mutation *TaxationSystemMutation
}

// Where appends a list predicates to the TaxationSystemUpdate builder.
func (tsu *TaxationSystemUpdate) Where(ps ...predicate.TaxationSystem) *TaxationSystemUpdate {
	tsu.mutation.Where(ps...)
	return tsu
}

// SetUsn6 sets the "usn6" field.
func (tsu *TaxationSystemUpdate) SetUsn6(f float64) *TaxationSystemUpdate {
	tsu.mutation.ResetUsn6()
	tsu.mutation.SetUsn6(f)
	return tsu
}

// AddUsn6 adds f to the "usn6" field.
func (tsu *TaxationSystemUpdate) AddUsn6(f float64) *TaxationSystemUpdate {
	tsu.mutation.AddUsn6(f)
	return tsu
}

// SetUsn15 sets the "usn15" field.
func (tsu *TaxationSystemUpdate) SetUsn15(f float64) *TaxationSystemUpdate {
	tsu.mutation.ResetUsn15()
	tsu.mutation.SetUsn15(f)
	return tsu
}

// AddUsn15 adds f to the "usn15" field.
func (tsu *TaxationSystemUpdate) AddUsn15(f float64) *TaxationSystemUpdate {
	tsu.mutation.AddUsn15(f)
	return tsu
}

// SetOsn sets the "osn" field.
func (tsu *TaxationSystemUpdate) SetOsn(f float64) *TaxationSystemUpdate {
	tsu.mutation.ResetOsn()
	tsu.mutation.SetOsn(f)
	return tsu
}

// AddOsn adds f to the "osn" field.
func (tsu *TaxationSystemUpdate) AddOsn(f float64) *TaxationSystemUpdate {
	tsu.mutation.AddOsn(f)
	return tsu
}

// AddHistoryIDs adds the "histories" edge to the History entity by IDs.
func (tsu *TaxationSystemUpdate) AddHistoryIDs(ids ...int) *TaxationSystemUpdate {
	tsu.mutation.AddHistoryIDs(ids...)
	return tsu
}

// AddHistories adds the "histories" edges to the History entity.
func (tsu *TaxationSystemUpdate) AddHistories(h ...*History) *TaxationSystemUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return tsu.AddHistoryIDs(ids...)
}

// Mutation returns the TaxationSystemMutation object of the builder.
func (tsu *TaxationSystemUpdate) Mutation() *TaxationSystemMutation {
	return tsu.mutation
}

// ClearHistories clears all "histories" edges to the History entity.
func (tsu *TaxationSystemUpdate) ClearHistories() *TaxationSystemUpdate {
	tsu.mutation.ClearHistories()
	return tsu
}

// RemoveHistoryIDs removes the "histories" edge to History entities by IDs.
func (tsu *TaxationSystemUpdate) RemoveHistoryIDs(ids ...int) *TaxationSystemUpdate {
	tsu.mutation.RemoveHistoryIDs(ids...)
	return tsu
}

// RemoveHistories removes "histories" edges to History entities.
func (tsu *TaxationSystemUpdate) RemoveHistories(h ...*History) *TaxationSystemUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return tsu.RemoveHistoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tsu *TaxationSystemUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tsu.sqlSave, tsu.mutation, tsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tsu *TaxationSystemUpdate) SaveX(ctx context.Context) int {
	affected, err := tsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tsu *TaxationSystemUpdate) Exec(ctx context.Context) error {
	_, err := tsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsu *TaxationSystemUpdate) ExecX(ctx context.Context) {
	if err := tsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tsu *TaxationSystemUpdate) check() error {
	if v, ok := tsu.mutation.Usn6(); ok {
		if err := taxationsystem.Usn6Validator(v); err != nil {
			return &ValidationError{Name: "usn6", err: fmt.Errorf(`ent: validator failed for field "TaxationSystem.usn6": %w`, err)}
		}
	}
	if v, ok := tsu.mutation.Usn15(); ok {
		if err := taxationsystem.Usn15Validator(v); err != nil {
			return &ValidationError{Name: "usn15", err: fmt.Errorf(`ent: validator failed for field "TaxationSystem.usn15": %w`, err)}
		}
	}
	if v, ok := tsu.mutation.Osn(); ok {
		if err := taxationsystem.OsnValidator(v); err != nil {
			return &ValidationError{Name: "osn", err: fmt.Errorf(`ent: validator failed for field "TaxationSystem.osn": %w`, err)}
		}
	}
	return nil
}

func (tsu *TaxationSystemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(taxationsystem.Table, taxationsystem.Columns, sqlgraph.NewFieldSpec(taxationsystem.FieldID, field.TypeInt))
	if ps := tsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tsu.mutation.Usn6(); ok {
		_spec.SetField(taxationsystem.FieldUsn6, field.TypeFloat64, value)
	}
	if value, ok := tsu.mutation.AddedUsn6(); ok {
		_spec.AddField(taxationsystem.FieldUsn6, field.TypeFloat64, value)
	}
	if value, ok := tsu.mutation.Usn15(); ok {
		_spec.SetField(taxationsystem.FieldUsn15, field.TypeFloat64, value)
	}
	if value, ok := tsu.mutation.AddedUsn15(); ok {
		_spec.AddField(taxationsystem.FieldUsn15, field.TypeFloat64, value)
	}
	if value, ok := tsu.mutation.Osn(); ok {
		_spec.SetField(taxationsystem.FieldOsn, field.TypeFloat64, value)
	}
	if value, ok := tsu.mutation.AddedOsn(); ok {
		_spec.AddField(taxationsystem.FieldOsn, field.TypeFloat64, value)
	}
	if tsu.mutation.HistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   taxationsystem.HistoriesTable,
			Columns: []string{taxationsystem.HistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsu.mutation.RemovedHistoriesIDs(); len(nodes) > 0 && !tsu.mutation.HistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   taxationsystem.HistoriesTable,
			Columns: []string{taxationsystem.HistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsu.mutation.HistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   taxationsystem.HistoriesTable,
			Columns: []string{taxationsystem.HistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taxationsystem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tsu.mutation.done = true
	return n, nil
}

// TaxationSystemUpdateOne is the builder for updating a single TaxationSystem entity.
type TaxationSystemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaxationSystemMutation
}

// SetUsn6 sets the "usn6" field.
func (tsuo *TaxationSystemUpdateOne) SetUsn6(f float64) *TaxationSystemUpdateOne {
	tsuo.mutation.ResetUsn6()
	tsuo.mutation.SetUsn6(f)
	return tsuo
}

// AddUsn6 adds f to the "usn6" field.
func (tsuo *TaxationSystemUpdateOne) AddUsn6(f float64) *TaxationSystemUpdateOne {
	tsuo.mutation.AddUsn6(f)
	return tsuo
}

// SetUsn15 sets the "usn15" field.
func (tsuo *TaxationSystemUpdateOne) SetUsn15(f float64) *TaxationSystemUpdateOne {
	tsuo.mutation.ResetUsn15()
	tsuo.mutation.SetUsn15(f)
	return tsuo
}

// AddUsn15 adds f to the "usn15" field.
func (tsuo *TaxationSystemUpdateOne) AddUsn15(f float64) *TaxationSystemUpdateOne {
	tsuo.mutation.AddUsn15(f)
	return tsuo
}

// SetOsn sets the "osn" field.
func (tsuo *TaxationSystemUpdateOne) SetOsn(f float64) *TaxationSystemUpdateOne {
	tsuo.mutation.ResetOsn()
	tsuo.mutation.SetOsn(f)
	return tsuo
}

// AddOsn adds f to the "osn" field.
func (tsuo *TaxationSystemUpdateOne) AddOsn(f float64) *TaxationSystemUpdateOne {
	tsuo.mutation.AddOsn(f)
	return tsuo
}

// AddHistoryIDs adds the "histories" edge to the History entity by IDs.
func (tsuo *TaxationSystemUpdateOne) AddHistoryIDs(ids ...int) *TaxationSystemUpdateOne {
	tsuo.mutation.AddHistoryIDs(ids...)
	return tsuo
}

// AddHistories adds the "histories" edges to the History entity.
func (tsuo *TaxationSystemUpdateOne) AddHistories(h ...*History) *TaxationSystemUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return tsuo.AddHistoryIDs(ids...)
}

// Mutation returns the TaxationSystemMutation object of the builder.
func (tsuo *TaxationSystemUpdateOne) Mutation() *TaxationSystemMutation {
	return tsuo.mutation
}

// ClearHistories clears all "histories" edges to the History entity.
func (tsuo *TaxationSystemUpdateOne) ClearHistories() *TaxationSystemUpdateOne {
	tsuo.mutation.ClearHistories()
	return tsuo
}

// RemoveHistoryIDs removes the "histories" edge to History entities by IDs.
func (tsuo *TaxationSystemUpdateOne) RemoveHistoryIDs(ids ...int) *TaxationSystemUpdateOne {
	tsuo.mutation.RemoveHistoryIDs(ids...)
	return tsuo
}

// RemoveHistories removes "histories" edges to History entities.
func (tsuo *TaxationSystemUpdateOne) RemoveHistories(h ...*History) *TaxationSystemUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return tsuo.RemoveHistoryIDs(ids...)
}

// Where appends a list predicates to the TaxationSystemUpdate builder.
func (tsuo *TaxationSystemUpdateOne) Where(ps ...predicate.TaxationSystem) *TaxationSystemUpdateOne {
	tsuo.mutation.Where(ps...)
	return tsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tsuo *TaxationSystemUpdateOne) Select(field string, fields ...string) *TaxationSystemUpdateOne {
	tsuo.fields = append([]string{field}, fields...)
	return tsuo
}

// Save executes the query and returns the updated TaxationSystem entity.
func (tsuo *TaxationSystemUpdateOne) Save(ctx context.Context) (*TaxationSystem, error) {
	return withHooks(ctx, tsuo.sqlSave, tsuo.mutation, tsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tsuo *TaxationSystemUpdateOne) SaveX(ctx context.Context) *TaxationSystem {
	node, err := tsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tsuo *TaxationSystemUpdateOne) Exec(ctx context.Context) error {
	_, err := tsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsuo *TaxationSystemUpdateOne) ExecX(ctx context.Context) {
	if err := tsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tsuo *TaxationSystemUpdateOne) check() error {
	if v, ok := tsuo.mutation.Usn6(); ok {
		if err := taxationsystem.Usn6Validator(v); err != nil {
			return &ValidationError{Name: "usn6", err: fmt.Errorf(`ent: validator failed for field "TaxationSystem.usn6": %w`, err)}
		}
	}
	if v, ok := tsuo.mutation.Usn15(); ok {
		if err := taxationsystem.Usn15Validator(v); err != nil {
			return &ValidationError{Name: "usn15", err: fmt.Errorf(`ent: validator failed for field "TaxationSystem.usn15": %w`, err)}
		}
	}
	if v, ok := tsuo.mutation.Osn(); ok {
		if err := taxationsystem.OsnValidator(v); err != nil {
			return &ValidationError{Name: "osn", err: fmt.Errorf(`ent: validator failed for field "TaxationSystem.osn": %w`, err)}
		}
	}
	return nil
}

func (tsuo *TaxationSystemUpdateOne) sqlSave(ctx context.Context) (_node *TaxationSystem, err error) {
	if err := tsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(taxationsystem.Table, taxationsystem.Columns, sqlgraph.NewFieldSpec(taxationsystem.FieldID, field.TypeInt))
	id, ok := tsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TaxationSystem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, taxationsystem.FieldID)
		for _, f := range fields {
			if !taxationsystem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != taxationsystem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tsuo.mutation.Usn6(); ok {
		_spec.SetField(taxationsystem.FieldUsn6, field.TypeFloat64, value)
	}
	if value, ok := tsuo.mutation.AddedUsn6(); ok {
		_spec.AddField(taxationsystem.FieldUsn6, field.TypeFloat64, value)
	}
	if value, ok := tsuo.mutation.Usn15(); ok {
		_spec.SetField(taxationsystem.FieldUsn15, field.TypeFloat64, value)
	}
	if value, ok := tsuo.mutation.AddedUsn15(); ok {
		_spec.AddField(taxationsystem.FieldUsn15, field.TypeFloat64, value)
	}
	if value, ok := tsuo.mutation.Osn(); ok {
		_spec.SetField(taxationsystem.FieldOsn, field.TypeFloat64, value)
	}
	if value, ok := tsuo.mutation.AddedOsn(); ok {
		_spec.AddField(taxationsystem.FieldOsn, field.TypeFloat64, value)
	}
	if tsuo.mutation.HistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   taxationsystem.HistoriesTable,
			Columns: []string{taxationsystem.HistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsuo.mutation.RemovedHistoriesIDs(); len(nodes) > 0 && !tsuo.mutation.HistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   taxationsystem.HistoriesTable,
			Columns: []string{taxationsystem.HistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsuo.mutation.HistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   taxationsystem.HistoriesTable,
			Columns: []string{taxationsystem.HistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TaxationSystem{config: tsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taxationsystem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tsuo.mutation.done = true
	return _node, nil
}
