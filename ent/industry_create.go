// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/while-act/hackathon-backend/ent/history"
	"github.com/while-act/hackathon-backend/ent/industry"
)

// IndustryCreate is the builder for creating a Industry entity.
type IndustryCreate struct {
	config
	mutation *IndustryMutation
	hooks    []Hook
}

// SetAvgWorkersNum sets the "avg_workers_num" field.
func (ic *IndustryCreate) SetAvgWorkersNum(f float64) *IndustryCreate {
	ic.mutation.SetAvgWorkersNum(f)
	return ic
}

// SetAvgWorkersNumCad sets the "avg_workers_num_cad" field.
func (ic *IndustryCreate) SetAvgWorkersNumCad(f float64) *IndustryCreate {
	ic.mutation.SetAvgWorkersNumCad(f)
	return ic
}

// SetAvgSalary sets the "avg_salary" field.
func (ic *IndustryCreate) SetAvgSalary(f float64) *IndustryCreate {
	ic.mutation.SetAvgSalary(f)
	return ic
}

// SetAvgSalaryCad sets the "avg_salary_cad" field.
func (ic *IndustryCreate) SetAvgSalaryCad(f float64) *IndustryCreate {
	ic.mutation.SetAvgSalaryCad(f)
	return ic
}

// SetID sets the "id" field.
func (ic *IndustryCreate) SetID(s string) *IndustryCreate {
	ic.mutation.SetID(s)
	return ic
}

// AddHistoryIDs adds the "histories" edge to the History entity by IDs.
func (ic *IndustryCreate) AddHistoryIDs(ids ...string) *IndustryCreate {
	ic.mutation.AddHistoryIDs(ids...)
	return ic
}

// AddHistories adds the "histories" edges to the History entity.
func (ic *IndustryCreate) AddHistories(h ...*History) *IndustryCreate {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return ic.AddHistoryIDs(ids...)
}

// Mutation returns the IndustryMutation object of the builder.
func (ic *IndustryCreate) Mutation() *IndustryMutation {
	return ic.mutation
}

// Save creates the Industry in the database.
func (ic *IndustryCreate) Save(ctx context.Context) (*Industry, error) {
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *IndustryCreate) SaveX(ctx context.Context) *Industry {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *IndustryCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *IndustryCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *IndustryCreate) check() error {
	if _, ok := ic.mutation.AvgWorkersNum(); !ok {
		return &ValidationError{Name: "avg_workers_num", err: errors.New(`ent: missing required field "Industry.avg_workers_num"`)}
	}
	if v, ok := ic.mutation.AvgWorkersNum(); ok {
		if err := industry.AvgWorkersNumValidator(v); err != nil {
			return &ValidationError{Name: "avg_workers_num", err: fmt.Errorf(`ent: validator failed for field "Industry.avg_workers_num": %w`, err)}
		}
	}
	if _, ok := ic.mutation.AvgWorkersNumCad(); !ok {
		return &ValidationError{Name: "avg_workers_num_cad", err: errors.New(`ent: missing required field "Industry.avg_workers_num_cad"`)}
	}
	if v, ok := ic.mutation.AvgWorkersNumCad(); ok {
		if err := industry.AvgWorkersNumCadValidator(v); err != nil {
			return &ValidationError{Name: "avg_workers_num_cad", err: fmt.Errorf(`ent: validator failed for field "Industry.avg_workers_num_cad": %w`, err)}
		}
	}
	if _, ok := ic.mutation.AvgSalary(); !ok {
		return &ValidationError{Name: "avg_salary", err: errors.New(`ent: missing required field "Industry.avg_salary"`)}
	}
	if v, ok := ic.mutation.AvgSalary(); ok {
		if err := industry.AvgSalaryValidator(v); err != nil {
			return &ValidationError{Name: "avg_salary", err: fmt.Errorf(`ent: validator failed for field "Industry.avg_salary": %w`, err)}
		}
	}
	if _, ok := ic.mutation.AvgSalaryCad(); !ok {
		return &ValidationError{Name: "avg_salary_cad", err: errors.New(`ent: missing required field "Industry.avg_salary_cad"`)}
	}
	if v, ok := ic.mutation.AvgSalaryCad(); ok {
		if err := industry.AvgSalaryCadValidator(v); err != nil {
			return &ValidationError{Name: "avg_salary_cad", err: fmt.Errorf(`ent: validator failed for field "Industry.avg_salary_cad": %w`, err)}
		}
	}
	return nil
}

func (ic *IndustryCreate) sqlSave(ctx context.Context) (*Industry, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Industry.ID type: %T", _spec.ID.Value)
		}
	}
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *IndustryCreate) createSpec() (*Industry, *sqlgraph.CreateSpec) {
	var (
		_node = &Industry{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(industry.Table, sqlgraph.NewFieldSpec(industry.FieldID, field.TypeString))
	)
	if id, ok := ic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ic.mutation.AvgWorkersNum(); ok {
		_spec.SetField(industry.FieldAvgWorkersNum, field.TypeFloat64, value)
		_node.AvgWorkersNum = value
	}
	if value, ok := ic.mutation.AvgWorkersNumCad(); ok {
		_spec.SetField(industry.FieldAvgWorkersNumCad, field.TypeFloat64, value)
		_node.AvgWorkersNumCad = value
	}
	if value, ok := ic.mutation.AvgSalary(); ok {
		_spec.SetField(industry.FieldAvgSalary, field.TypeFloat64, value)
		_node.AvgSalary = value
	}
	if value, ok := ic.mutation.AvgSalaryCad(); ok {
		_spec.SetField(industry.FieldAvgSalaryCad, field.TypeFloat64, value)
		_node.AvgSalaryCad = value
	}
	if nodes := ic.mutation.HistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   industry.HistoriesTable,
			Columns: []string{industry.HistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// IndustryCreateBulk is the builder for creating many Industry entities in bulk.
type IndustryCreateBulk struct {
	config
	builders []*IndustryCreate
}

// Save creates the Industry entities in the database.
func (icb *IndustryCreateBulk) Save(ctx context.Context) ([]*Industry, error) {
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Industry, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IndustryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *IndustryCreateBulk) SaveX(ctx context.Context) []*Industry {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *IndustryCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *IndustryCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}
