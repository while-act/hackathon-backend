// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/wtkeqrf0/while.act/ent/economicactivity"
)

// EconomicActivity is the model entity for the EconomicActivity schema.
type EconomicActivity struct {
	config `example:"-" json:"-"`
	// ID of the ent.
	ID string `json:"main,omitempty" example:"Автомобильная промышленность"`
	// Subs holds the value of the "subs" field.
	Subs         string `json:"subs,omitempty" example:"Автомобильная промышленность"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EconomicActivity) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case economicactivity.FieldID, economicactivity.FieldSubs:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EconomicActivity fields.
func (ea *EconomicActivity) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case economicactivity.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ea.ID = value.String
			}
		case economicactivity.FieldSubs:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subs", values[i])
			} else if value.Valid {
				ea.Subs = value.String
			}
		default:
			ea.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EconomicActivity.
// This includes values selected through modifiers, order, etc.
func (ea *EconomicActivity) Value(name string) (ent.Value, error) {
	return ea.selectValues.Get(name)
}

// Update returns a builder for updating this EconomicActivity.
// Note that you need to call EconomicActivity.Unwrap() before calling this method if this EconomicActivity
// was returned from a transaction, and the transaction was committed or rolled back.
func (ea *EconomicActivity) Update() *EconomicActivityUpdateOne {
	return NewEconomicActivityClient(ea.config).UpdateOne(ea)
}

// Unwrap unwraps the EconomicActivity entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ea *EconomicActivity) Unwrap() *EconomicActivity {
	_tx, ok := ea.config.driver.(*txDriver)
	if !ok {
		panic("ent: EconomicActivity is not a transactional entity")
	}
	ea.config.driver = _tx.drv
	return ea
}

// String implements the fmt.Stringer.
func (ea *EconomicActivity) String() string {
	var builder strings.Builder
	builder.WriteString("EconomicActivity(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ea.ID))
	builder.WriteString("subs=")
	builder.WriteString(ea.Subs)
	builder.WriteByte(')')
	return builder.String()
}

// EconomicActivities is a parsable slice of EconomicActivity.
type EconomicActivities []*EconomicActivity
