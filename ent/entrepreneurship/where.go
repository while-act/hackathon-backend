// Code generated by ent, DO NOT EDIT.

package entrepreneurship

import (
	"entgo.io/ent/dialect/sql"
	"github.com/wtkeqrf0/while.act/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Entrepreneurship {
	return predicate.Entrepreneurship(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Entrepreneurship {
	return predicate.Entrepreneurship(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Entrepreneurship {
	return predicate.Entrepreneurship(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Entrepreneurship {
	return predicate.Entrepreneurship(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Entrepreneurship {
	return predicate.Entrepreneurship(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Entrepreneurship {
	return predicate.Entrepreneurship(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Entrepreneurship {
	return predicate.Entrepreneurship(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Entrepreneurship {
	return predicate.Entrepreneurship(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Entrepreneurship {
	return predicate.Entrepreneurship(sql.FieldLTE(FieldID, id))
}

// Types applies equality check predicate on the "types" field. It's identical to TypesEQ.
func Types(v string) predicate.Entrepreneurship {
	return predicate.Entrepreneurship(sql.FieldEQ(FieldTypes, v))
}

// TypesEQ applies the EQ predicate on the "types" field.
func TypesEQ(v string) predicate.Entrepreneurship {
	return predicate.Entrepreneurship(sql.FieldEQ(FieldTypes, v))
}

// TypesNEQ applies the NEQ predicate on the "types" field.
func TypesNEQ(v string) predicate.Entrepreneurship {
	return predicate.Entrepreneurship(sql.FieldNEQ(FieldTypes, v))
}

// TypesIn applies the In predicate on the "types" field.
func TypesIn(vs ...string) predicate.Entrepreneurship {
	return predicate.Entrepreneurship(sql.FieldIn(FieldTypes, vs...))
}

// TypesNotIn applies the NotIn predicate on the "types" field.
func TypesNotIn(vs ...string) predicate.Entrepreneurship {
	return predicate.Entrepreneurship(sql.FieldNotIn(FieldTypes, vs...))
}

// TypesGT applies the GT predicate on the "types" field.
func TypesGT(v string) predicate.Entrepreneurship {
	return predicate.Entrepreneurship(sql.FieldGT(FieldTypes, v))
}

// TypesGTE applies the GTE predicate on the "types" field.
func TypesGTE(v string) predicate.Entrepreneurship {
	return predicate.Entrepreneurship(sql.FieldGTE(FieldTypes, v))
}

// TypesLT applies the LT predicate on the "types" field.
func TypesLT(v string) predicate.Entrepreneurship {
	return predicate.Entrepreneurship(sql.FieldLT(FieldTypes, v))
}

// TypesLTE applies the LTE predicate on the "types" field.
func TypesLTE(v string) predicate.Entrepreneurship {
	return predicate.Entrepreneurship(sql.FieldLTE(FieldTypes, v))
}

// TypesContains applies the Contains predicate on the "types" field.
func TypesContains(v string) predicate.Entrepreneurship {
	return predicate.Entrepreneurship(sql.FieldContains(FieldTypes, v))
}

// TypesHasPrefix applies the HasPrefix predicate on the "types" field.
func TypesHasPrefix(v string) predicate.Entrepreneurship {
	return predicate.Entrepreneurship(sql.FieldHasPrefix(FieldTypes, v))
}

// TypesHasSuffix applies the HasSuffix predicate on the "types" field.
func TypesHasSuffix(v string) predicate.Entrepreneurship {
	return predicate.Entrepreneurship(sql.FieldHasSuffix(FieldTypes, v))
}

// TypesEqualFold applies the EqualFold predicate on the "types" field.
func TypesEqualFold(v string) predicate.Entrepreneurship {
	return predicate.Entrepreneurship(sql.FieldEqualFold(FieldTypes, v))
}

// TypesContainsFold applies the ContainsFold predicate on the "types" field.
func TypesContainsFold(v string) predicate.Entrepreneurship {
	return predicate.Entrepreneurship(sql.FieldContainsFold(FieldTypes, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Entrepreneurship) predicate.Entrepreneurship {
	return predicate.Entrepreneurship(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Entrepreneurship) predicate.Entrepreneurship {
	return predicate.Entrepreneurship(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Entrepreneurship) predicate.Entrepreneurship {
	return predicate.Entrepreneurship(func(s *sql.Selector) {
		p(s.Not())
	})
}
