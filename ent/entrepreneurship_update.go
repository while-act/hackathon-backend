// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wtkeqrf0/while.act/ent/entrepreneurship"
	"github.com/wtkeqrf0/while.act/ent/predicate"
)

// EntrepreneurshipUpdate is the builder for updating Entrepreneurship entities.
type EntrepreneurshipUpdate struct {
	config
	hooks    []Hook
	mutation *EntrepreneurshipMutation
}

// Where appends a list predicates to the EntrepreneurshipUpdate builder.
func (eu *EntrepreneurshipUpdate) Where(ps ...predicate.Entrepreneurship) *EntrepreneurshipUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetTypes sets the "types" field.
func (eu *EntrepreneurshipUpdate) SetTypes(s string) *EntrepreneurshipUpdate {
	eu.mutation.SetTypes(s)
	return eu
}

// Mutation returns the EntrepreneurshipMutation object of the builder.
func (eu *EntrepreneurshipUpdate) Mutation() *EntrepreneurshipMutation {
	return eu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EntrepreneurshipUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EntrepreneurshipUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EntrepreneurshipUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EntrepreneurshipUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eu *EntrepreneurshipUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(entrepreneurship.Table, entrepreneurship.Columns, sqlgraph.NewFieldSpec(entrepreneurship.FieldID, field.TypeInt))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.Types(); ok {
		_spec.SetField(entrepreneurship.FieldTypes, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entrepreneurship.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EntrepreneurshipUpdateOne is the builder for updating a single Entrepreneurship entity.
type EntrepreneurshipUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EntrepreneurshipMutation
}

// SetTypes sets the "types" field.
func (euo *EntrepreneurshipUpdateOne) SetTypes(s string) *EntrepreneurshipUpdateOne {
	euo.mutation.SetTypes(s)
	return euo
}

// Mutation returns the EntrepreneurshipMutation object of the builder.
func (euo *EntrepreneurshipUpdateOne) Mutation() *EntrepreneurshipMutation {
	return euo.mutation
}

// Where appends a list predicates to the EntrepreneurshipUpdate builder.
func (euo *EntrepreneurshipUpdateOne) Where(ps ...predicate.Entrepreneurship) *EntrepreneurshipUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EntrepreneurshipUpdateOne) Select(field string, fields ...string) *EntrepreneurshipUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Entrepreneurship entity.
func (euo *EntrepreneurshipUpdateOne) Save(ctx context.Context) (*Entrepreneurship, error) {
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EntrepreneurshipUpdateOne) SaveX(ctx context.Context) *Entrepreneurship {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EntrepreneurshipUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EntrepreneurshipUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euo *EntrepreneurshipUpdateOne) sqlSave(ctx context.Context) (_node *Entrepreneurship, err error) {
	_spec := sqlgraph.NewUpdateSpec(entrepreneurship.Table, entrepreneurship.Columns, sqlgraph.NewFieldSpec(entrepreneurship.FieldID, field.TypeInt))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Entrepreneurship.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entrepreneurship.FieldID)
		for _, f := range fields {
			if !entrepreneurship.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != entrepreneurship.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.Types(); ok {
		_spec.SetField(entrepreneurship.FieldTypes, field.TypeString, value)
	}
	_node = &Entrepreneurship{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entrepreneurship.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
