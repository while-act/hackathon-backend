// Code generated by ent, DO NOT EDIT.

package economicactivity

import (
	"entgo.io/ent/dialect/sql"
	"github.com/wtkeqrf0/while.act/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.EconomicActivity {
	return predicate.EconomicActivity(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.EconomicActivity {
	return predicate.EconomicActivity(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.EconomicActivity {
	return predicate.EconomicActivity(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.EconomicActivity {
	return predicate.EconomicActivity(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.EconomicActivity {
	return predicate.EconomicActivity(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.EconomicActivity {
	return predicate.EconomicActivity(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.EconomicActivity {
	return predicate.EconomicActivity(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.EconomicActivity {
	return predicate.EconomicActivity(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.EconomicActivity {
	return predicate.EconomicActivity(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.EconomicActivity {
	return predicate.EconomicActivity(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.EconomicActivity {
	return predicate.EconomicActivity(sql.FieldContainsFold(FieldID, id))
}

// Subs applies equality check predicate on the "subs" field. It's identical to SubsEQ.
func Subs(v string) predicate.EconomicActivity {
	return predicate.EconomicActivity(sql.FieldEQ(FieldSubs, v))
}

// SubsEQ applies the EQ predicate on the "subs" field.
func SubsEQ(v string) predicate.EconomicActivity {
	return predicate.EconomicActivity(sql.FieldEQ(FieldSubs, v))
}

// SubsNEQ applies the NEQ predicate on the "subs" field.
func SubsNEQ(v string) predicate.EconomicActivity {
	return predicate.EconomicActivity(sql.FieldNEQ(FieldSubs, v))
}

// SubsIn applies the In predicate on the "subs" field.
func SubsIn(vs ...string) predicate.EconomicActivity {
	return predicate.EconomicActivity(sql.FieldIn(FieldSubs, vs...))
}

// SubsNotIn applies the NotIn predicate on the "subs" field.
func SubsNotIn(vs ...string) predicate.EconomicActivity {
	return predicate.EconomicActivity(sql.FieldNotIn(FieldSubs, vs...))
}

// SubsGT applies the GT predicate on the "subs" field.
func SubsGT(v string) predicate.EconomicActivity {
	return predicate.EconomicActivity(sql.FieldGT(FieldSubs, v))
}

// SubsGTE applies the GTE predicate on the "subs" field.
func SubsGTE(v string) predicate.EconomicActivity {
	return predicate.EconomicActivity(sql.FieldGTE(FieldSubs, v))
}

// SubsLT applies the LT predicate on the "subs" field.
func SubsLT(v string) predicate.EconomicActivity {
	return predicate.EconomicActivity(sql.FieldLT(FieldSubs, v))
}

// SubsLTE applies the LTE predicate on the "subs" field.
func SubsLTE(v string) predicate.EconomicActivity {
	return predicate.EconomicActivity(sql.FieldLTE(FieldSubs, v))
}

// SubsContains applies the Contains predicate on the "subs" field.
func SubsContains(v string) predicate.EconomicActivity {
	return predicate.EconomicActivity(sql.FieldContains(FieldSubs, v))
}

// SubsHasPrefix applies the HasPrefix predicate on the "subs" field.
func SubsHasPrefix(v string) predicate.EconomicActivity {
	return predicate.EconomicActivity(sql.FieldHasPrefix(FieldSubs, v))
}

// SubsHasSuffix applies the HasSuffix predicate on the "subs" field.
func SubsHasSuffix(v string) predicate.EconomicActivity {
	return predicate.EconomicActivity(sql.FieldHasSuffix(FieldSubs, v))
}

// SubsIsNil applies the IsNil predicate on the "subs" field.
func SubsIsNil() predicate.EconomicActivity {
	return predicate.EconomicActivity(sql.FieldIsNull(FieldSubs))
}

// SubsNotNil applies the NotNil predicate on the "subs" field.
func SubsNotNil() predicate.EconomicActivity {
	return predicate.EconomicActivity(sql.FieldNotNull(FieldSubs))
}

// SubsEqualFold applies the EqualFold predicate on the "subs" field.
func SubsEqualFold(v string) predicate.EconomicActivity {
	return predicate.EconomicActivity(sql.FieldEqualFold(FieldSubs, v))
}

// SubsContainsFold applies the ContainsFold predicate on the "subs" field.
func SubsContainsFold(v string) predicate.EconomicActivity {
	return predicate.EconomicActivity(sql.FieldContainsFold(FieldSubs, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EconomicActivity) predicate.EconomicActivity {
	return predicate.EconomicActivity(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EconomicActivity) predicate.EconomicActivity {
	return predicate.EconomicActivity(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EconomicActivity) predicate.EconomicActivity {
	return predicate.EconomicActivity(func(s *sql.Selector) {
		p(s.Not())
	})
}
