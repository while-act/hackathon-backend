// Code generated by ent, DO NOT EDIT.

package history

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/while-act/hackathon-backend/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.History {
	return predicate.History(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.History {
	return predicate.History(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.History {
	return predicate.History(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.History {
	return predicate.History(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.History {
	return predicate.History(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.History {
	return predicate.History(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.History {
	return predicate.History(sql.FieldLTE(FieldID, id))
}

// CompanyName applies equality check predicate on the "company_name" field. It's identical to CompanyNameEQ.
func CompanyName(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldCompanyName, v))
}

// IndustryBranch applies equality check predicate on the "industry_branch" field. It's identical to IndustryBranchEQ.
func IndustryBranch(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldIndustryBranch, v))
}

// FullTimeEmployees applies equality check predicate on the "full_time_employees" field. It's identical to FullTimeEmployeesEQ.
func FullTimeEmployees(v int) predicate.History {
	return predicate.History(sql.FieldEQ(FieldFullTimeEmployees, v))
}

// DistrictTitle applies equality check predicate on the "district_title" field. It's identical to DistrictTitleEQ.
func DistrictTitle(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldDistrictTitle, v))
}

// LandArea applies equality check predicate on the "land_area" field. It's identical to LandAreaEQ.
func LandArea(v float64) predicate.History {
	return predicate.History(sql.FieldEQ(FieldLandArea, v))
}

// ConstructionFacilitiesArea applies equality check predicate on the "construction_facilities_area" field. It's identical to ConstructionFacilitiesAreaEQ.
func ConstructionFacilitiesArea(v float64) predicate.History {
	return predicate.History(sql.FieldEQ(FieldConstructionFacilitiesArea, v))
}

// EquipmentType applies equality check predicate on the "equipment_type" field. It's identical to EquipmentTypeEQ.
func EquipmentType(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldEquipmentType, v))
}

// OrganizationType applies equality check predicate on the "organization_type" field. It's identical to OrganizationTypeEQ.
func OrganizationType(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldOrganizationType, v))
}

// FacilityType applies equality check predicate on the "facility_type" field. It's identical to FacilityTypeEQ.
func FacilityType(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldFacilityType, v))
}

// AccountingServices applies equality check predicate on the "accounting_services" field. It's identical to AccountingServicesEQ.
func AccountingServices(v bool) predicate.History {
	return predicate.History(sql.FieldEQ(FieldAccountingServices, v))
}

// Patent applies equality check predicate on the "patent" field. It's identical to PatentEQ.
func Patent(v bool) predicate.History {
	return predicate.History(sql.FieldEQ(FieldPatent, v))
}

// Other applies equality check predicate on the "other" field. It's identical to OtherEQ.
func Other(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldOther, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.History {
	return predicate.History(sql.FieldEQ(FieldUserID, v))
}

// CompanyNameEQ applies the EQ predicate on the "company_name" field.
func CompanyNameEQ(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldCompanyName, v))
}

// CompanyNameNEQ applies the NEQ predicate on the "company_name" field.
func CompanyNameNEQ(v string) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldCompanyName, v))
}

// CompanyNameIn applies the In predicate on the "company_name" field.
func CompanyNameIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldIn(FieldCompanyName, vs...))
}

// CompanyNameNotIn applies the NotIn predicate on the "company_name" field.
func CompanyNameNotIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldCompanyName, vs...))
}

// CompanyNameGT applies the GT predicate on the "company_name" field.
func CompanyNameGT(v string) predicate.History {
	return predicate.History(sql.FieldGT(FieldCompanyName, v))
}

// CompanyNameGTE applies the GTE predicate on the "company_name" field.
func CompanyNameGTE(v string) predicate.History {
	return predicate.History(sql.FieldGTE(FieldCompanyName, v))
}

// CompanyNameLT applies the LT predicate on the "company_name" field.
func CompanyNameLT(v string) predicate.History {
	return predicate.History(sql.FieldLT(FieldCompanyName, v))
}

// CompanyNameLTE applies the LTE predicate on the "company_name" field.
func CompanyNameLTE(v string) predicate.History {
	return predicate.History(sql.FieldLTE(FieldCompanyName, v))
}

// CompanyNameContains applies the Contains predicate on the "company_name" field.
func CompanyNameContains(v string) predicate.History {
	return predicate.History(sql.FieldContains(FieldCompanyName, v))
}

// CompanyNameHasPrefix applies the HasPrefix predicate on the "company_name" field.
func CompanyNameHasPrefix(v string) predicate.History {
	return predicate.History(sql.FieldHasPrefix(FieldCompanyName, v))
}

// CompanyNameHasSuffix applies the HasSuffix predicate on the "company_name" field.
func CompanyNameHasSuffix(v string) predicate.History {
	return predicate.History(sql.FieldHasSuffix(FieldCompanyName, v))
}

// CompanyNameEqualFold applies the EqualFold predicate on the "company_name" field.
func CompanyNameEqualFold(v string) predicate.History {
	return predicate.History(sql.FieldEqualFold(FieldCompanyName, v))
}

// CompanyNameContainsFold applies the ContainsFold predicate on the "company_name" field.
func CompanyNameContainsFold(v string) predicate.History {
	return predicate.History(sql.FieldContainsFold(FieldCompanyName, v))
}

// IndustryBranchEQ applies the EQ predicate on the "industry_branch" field.
func IndustryBranchEQ(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldIndustryBranch, v))
}

// IndustryBranchNEQ applies the NEQ predicate on the "industry_branch" field.
func IndustryBranchNEQ(v string) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldIndustryBranch, v))
}

// IndustryBranchIn applies the In predicate on the "industry_branch" field.
func IndustryBranchIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldIn(FieldIndustryBranch, vs...))
}

// IndustryBranchNotIn applies the NotIn predicate on the "industry_branch" field.
func IndustryBranchNotIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldIndustryBranch, vs...))
}

// IndustryBranchGT applies the GT predicate on the "industry_branch" field.
func IndustryBranchGT(v string) predicate.History {
	return predicate.History(sql.FieldGT(FieldIndustryBranch, v))
}

// IndustryBranchGTE applies the GTE predicate on the "industry_branch" field.
func IndustryBranchGTE(v string) predicate.History {
	return predicate.History(sql.FieldGTE(FieldIndustryBranch, v))
}

// IndustryBranchLT applies the LT predicate on the "industry_branch" field.
func IndustryBranchLT(v string) predicate.History {
	return predicate.History(sql.FieldLT(FieldIndustryBranch, v))
}

// IndustryBranchLTE applies the LTE predicate on the "industry_branch" field.
func IndustryBranchLTE(v string) predicate.History {
	return predicate.History(sql.FieldLTE(FieldIndustryBranch, v))
}

// IndustryBranchContains applies the Contains predicate on the "industry_branch" field.
func IndustryBranchContains(v string) predicate.History {
	return predicate.History(sql.FieldContains(FieldIndustryBranch, v))
}

// IndustryBranchHasPrefix applies the HasPrefix predicate on the "industry_branch" field.
func IndustryBranchHasPrefix(v string) predicate.History {
	return predicate.History(sql.FieldHasPrefix(FieldIndustryBranch, v))
}

// IndustryBranchHasSuffix applies the HasSuffix predicate on the "industry_branch" field.
func IndustryBranchHasSuffix(v string) predicate.History {
	return predicate.History(sql.FieldHasSuffix(FieldIndustryBranch, v))
}

// IndustryBranchEqualFold applies the EqualFold predicate on the "industry_branch" field.
func IndustryBranchEqualFold(v string) predicate.History {
	return predicate.History(sql.FieldEqualFold(FieldIndustryBranch, v))
}

// IndustryBranchContainsFold applies the ContainsFold predicate on the "industry_branch" field.
func IndustryBranchContainsFold(v string) predicate.History {
	return predicate.History(sql.FieldContainsFold(FieldIndustryBranch, v))
}

// FullTimeEmployeesEQ applies the EQ predicate on the "full_time_employees" field.
func FullTimeEmployeesEQ(v int) predicate.History {
	return predicate.History(sql.FieldEQ(FieldFullTimeEmployees, v))
}

// FullTimeEmployeesNEQ applies the NEQ predicate on the "full_time_employees" field.
func FullTimeEmployeesNEQ(v int) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldFullTimeEmployees, v))
}

// FullTimeEmployeesIn applies the In predicate on the "full_time_employees" field.
func FullTimeEmployeesIn(vs ...int) predicate.History {
	return predicate.History(sql.FieldIn(FieldFullTimeEmployees, vs...))
}

// FullTimeEmployeesNotIn applies the NotIn predicate on the "full_time_employees" field.
func FullTimeEmployeesNotIn(vs ...int) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldFullTimeEmployees, vs...))
}

// FullTimeEmployeesGT applies the GT predicate on the "full_time_employees" field.
func FullTimeEmployeesGT(v int) predicate.History {
	return predicate.History(sql.FieldGT(FieldFullTimeEmployees, v))
}

// FullTimeEmployeesGTE applies the GTE predicate on the "full_time_employees" field.
func FullTimeEmployeesGTE(v int) predicate.History {
	return predicate.History(sql.FieldGTE(FieldFullTimeEmployees, v))
}

// FullTimeEmployeesLT applies the LT predicate on the "full_time_employees" field.
func FullTimeEmployeesLT(v int) predicate.History {
	return predicate.History(sql.FieldLT(FieldFullTimeEmployees, v))
}

// FullTimeEmployeesLTE applies the LTE predicate on the "full_time_employees" field.
func FullTimeEmployeesLTE(v int) predicate.History {
	return predicate.History(sql.FieldLTE(FieldFullTimeEmployees, v))
}

// DistrictTitleEQ applies the EQ predicate on the "district_title" field.
func DistrictTitleEQ(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldDistrictTitle, v))
}

// DistrictTitleNEQ applies the NEQ predicate on the "district_title" field.
func DistrictTitleNEQ(v string) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldDistrictTitle, v))
}

// DistrictTitleIn applies the In predicate on the "district_title" field.
func DistrictTitleIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldIn(FieldDistrictTitle, vs...))
}

// DistrictTitleNotIn applies the NotIn predicate on the "district_title" field.
func DistrictTitleNotIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldDistrictTitle, vs...))
}

// DistrictTitleGT applies the GT predicate on the "district_title" field.
func DistrictTitleGT(v string) predicate.History {
	return predicate.History(sql.FieldGT(FieldDistrictTitle, v))
}

// DistrictTitleGTE applies the GTE predicate on the "district_title" field.
func DistrictTitleGTE(v string) predicate.History {
	return predicate.History(sql.FieldGTE(FieldDistrictTitle, v))
}

// DistrictTitleLT applies the LT predicate on the "district_title" field.
func DistrictTitleLT(v string) predicate.History {
	return predicate.History(sql.FieldLT(FieldDistrictTitle, v))
}

// DistrictTitleLTE applies the LTE predicate on the "district_title" field.
func DistrictTitleLTE(v string) predicate.History {
	return predicate.History(sql.FieldLTE(FieldDistrictTitle, v))
}

// DistrictTitleContains applies the Contains predicate on the "district_title" field.
func DistrictTitleContains(v string) predicate.History {
	return predicate.History(sql.FieldContains(FieldDistrictTitle, v))
}

// DistrictTitleHasPrefix applies the HasPrefix predicate on the "district_title" field.
func DistrictTitleHasPrefix(v string) predicate.History {
	return predicate.History(sql.FieldHasPrefix(FieldDistrictTitle, v))
}

// DistrictTitleHasSuffix applies the HasSuffix predicate on the "district_title" field.
func DistrictTitleHasSuffix(v string) predicate.History {
	return predicate.History(sql.FieldHasSuffix(FieldDistrictTitle, v))
}

// DistrictTitleEqualFold applies the EqualFold predicate on the "district_title" field.
func DistrictTitleEqualFold(v string) predicate.History {
	return predicate.History(sql.FieldEqualFold(FieldDistrictTitle, v))
}

// DistrictTitleContainsFold applies the ContainsFold predicate on the "district_title" field.
func DistrictTitleContainsFold(v string) predicate.History {
	return predicate.History(sql.FieldContainsFold(FieldDistrictTitle, v))
}

// LandAreaEQ applies the EQ predicate on the "land_area" field.
func LandAreaEQ(v float64) predicate.History {
	return predicate.History(sql.FieldEQ(FieldLandArea, v))
}

// LandAreaNEQ applies the NEQ predicate on the "land_area" field.
func LandAreaNEQ(v float64) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldLandArea, v))
}

// LandAreaIn applies the In predicate on the "land_area" field.
func LandAreaIn(vs ...float64) predicate.History {
	return predicate.History(sql.FieldIn(FieldLandArea, vs...))
}

// LandAreaNotIn applies the NotIn predicate on the "land_area" field.
func LandAreaNotIn(vs ...float64) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldLandArea, vs...))
}

// LandAreaGT applies the GT predicate on the "land_area" field.
func LandAreaGT(v float64) predicate.History {
	return predicate.History(sql.FieldGT(FieldLandArea, v))
}

// LandAreaGTE applies the GTE predicate on the "land_area" field.
func LandAreaGTE(v float64) predicate.History {
	return predicate.History(sql.FieldGTE(FieldLandArea, v))
}

// LandAreaLT applies the LT predicate on the "land_area" field.
func LandAreaLT(v float64) predicate.History {
	return predicate.History(sql.FieldLT(FieldLandArea, v))
}

// LandAreaLTE applies the LTE predicate on the "land_area" field.
func LandAreaLTE(v float64) predicate.History {
	return predicate.History(sql.FieldLTE(FieldLandArea, v))
}

// ConstructionFacilitiesAreaEQ applies the EQ predicate on the "construction_facilities_area" field.
func ConstructionFacilitiesAreaEQ(v float64) predicate.History {
	return predicate.History(sql.FieldEQ(FieldConstructionFacilitiesArea, v))
}

// ConstructionFacilitiesAreaNEQ applies the NEQ predicate on the "construction_facilities_area" field.
func ConstructionFacilitiesAreaNEQ(v float64) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldConstructionFacilitiesArea, v))
}

// ConstructionFacilitiesAreaIn applies the In predicate on the "construction_facilities_area" field.
func ConstructionFacilitiesAreaIn(vs ...float64) predicate.History {
	return predicate.History(sql.FieldIn(FieldConstructionFacilitiesArea, vs...))
}

// ConstructionFacilitiesAreaNotIn applies the NotIn predicate on the "construction_facilities_area" field.
func ConstructionFacilitiesAreaNotIn(vs ...float64) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldConstructionFacilitiesArea, vs...))
}

// ConstructionFacilitiesAreaGT applies the GT predicate on the "construction_facilities_area" field.
func ConstructionFacilitiesAreaGT(v float64) predicate.History {
	return predicate.History(sql.FieldGT(FieldConstructionFacilitiesArea, v))
}

// ConstructionFacilitiesAreaGTE applies the GTE predicate on the "construction_facilities_area" field.
func ConstructionFacilitiesAreaGTE(v float64) predicate.History {
	return predicate.History(sql.FieldGTE(FieldConstructionFacilitiesArea, v))
}

// ConstructionFacilitiesAreaLT applies the LT predicate on the "construction_facilities_area" field.
func ConstructionFacilitiesAreaLT(v float64) predicate.History {
	return predicate.History(sql.FieldLT(FieldConstructionFacilitiesArea, v))
}

// ConstructionFacilitiesAreaLTE applies the LTE predicate on the "construction_facilities_area" field.
func ConstructionFacilitiesAreaLTE(v float64) predicate.History {
	return predicate.History(sql.FieldLTE(FieldConstructionFacilitiesArea, v))
}

// EquipmentTypeEQ applies the EQ predicate on the "equipment_type" field.
func EquipmentTypeEQ(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldEquipmentType, v))
}

// EquipmentTypeNEQ applies the NEQ predicate on the "equipment_type" field.
func EquipmentTypeNEQ(v string) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldEquipmentType, v))
}

// EquipmentTypeIn applies the In predicate on the "equipment_type" field.
func EquipmentTypeIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldIn(FieldEquipmentType, vs...))
}

// EquipmentTypeNotIn applies the NotIn predicate on the "equipment_type" field.
func EquipmentTypeNotIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldEquipmentType, vs...))
}

// EquipmentTypeGT applies the GT predicate on the "equipment_type" field.
func EquipmentTypeGT(v string) predicate.History {
	return predicate.History(sql.FieldGT(FieldEquipmentType, v))
}

// EquipmentTypeGTE applies the GTE predicate on the "equipment_type" field.
func EquipmentTypeGTE(v string) predicate.History {
	return predicate.History(sql.FieldGTE(FieldEquipmentType, v))
}

// EquipmentTypeLT applies the LT predicate on the "equipment_type" field.
func EquipmentTypeLT(v string) predicate.History {
	return predicate.History(sql.FieldLT(FieldEquipmentType, v))
}

// EquipmentTypeLTE applies the LTE predicate on the "equipment_type" field.
func EquipmentTypeLTE(v string) predicate.History {
	return predicate.History(sql.FieldLTE(FieldEquipmentType, v))
}

// EquipmentTypeContains applies the Contains predicate on the "equipment_type" field.
func EquipmentTypeContains(v string) predicate.History {
	return predicate.History(sql.FieldContains(FieldEquipmentType, v))
}

// EquipmentTypeHasPrefix applies the HasPrefix predicate on the "equipment_type" field.
func EquipmentTypeHasPrefix(v string) predicate.History {
	return predicate.History(sql.FieldHasPrefix(FieldEquipmentType, v))
}

// EquipmentTypeHasSuffix applies the HasSuffix predicate on the "equipment_type" field.
func EquipmentTypeHasSuffix(v string) predicate.History {
	return predicate.History(sql.FieldHasSuffix(FieldEquipmentType, v))
}

// EquipmentTypeEqualFold applies the EqualFold predicate on the "equipment_type" field.
func EquipmentTypeEqualFold(v string) predicate.History {
	return predicate.History(sql.FieldEqualFold(FieldEquipmentType, v))
}

// EquipmentTypeContainsFold applies the ContainsFold predicate on the "equipment_type" field.
func EquipmentTypeContainsFold(v string) predicate.History {
	return predicate.History(sql.FieldContainsFold(FieldEquipmentType, v))
}

// OrganizationTypeEQ applies the EQ predicate on the "organization_type" field.
func OrganizationTypeEQ(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldOrganizationType, v))
}

// OrganizationTypeNEQ applies the NEQ predicate on the "organization_type" field.
func OrganizationTypeNEQ(v string) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldOrganizationType, v))
}

// OrganizationTypeIn applies the In predicate on the "organization_type" field.
func OrganizationTypeIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldIn(FieldOrganizationType, vs...))
}

// OrganizationTypeNotIn applies the NotIn predicate on the "organization_type" field.
func OrganizationTypeNotIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldOrganizationType, vs...))
}

// OrganizationTypeGT applies the GT predicate on the "organization_type" field.
func OrganizationTypeGT(v string) predicate.History {
	return predicate.History(sql.FieldGT(FieldOrganizationType, v))
}

// OrganizationTypeGTE applies the GTE predicate on the "organization_type" field.
func OrganizationTypeGTE(v string) predicate.History {
	return predicate.History(sql.FieldGTE(FieldOrganizationType, v))
}

// OrganizationTypeLT applies the LT predicate on the "organization_type" field.
func OrganizationTypeLT(v string) predicate.History {
	return predicate.History(sql.FieldLT(FieldOrganizationType, v))
}

// OrganizationTypeLTE applies the LTE predicate on the "organization_type" field.
func OrganizationTypeLTE(v string) predicate.History {
	return predicate.History(sql.FieldLTE(FieldOrganizationType, v))
}

// OrganizationTypeContains applies the Contains predicate on the "organization_type" field.
func OrganizationTypeContains(v string) predicate.History {
	return predicate.History(sql.FieldContains(FieldOrganizationType, v))
}

// OrganizationTypeHasPrefix applies the HasPrefix predicate on the "organization_type" field.
func OrganizationTypeHasPrefix(v string) predicate.History {
	return predicate.History(sql.FieldHasPrefix(FieldOrganizationType, v))
}

// OrganizationTypeHasSuffix applies the HasSuffix predicate on the "organization_type" field.
func OrganizationTypeHasSuffix(v string) predicate.History {
	return predicate.History(sql.FieldHasSuffix(FieldOrganizationType, v))
}

// OrganizationTypeEqualFold applies the EqualFold predicate on the "organization_type" field.
func OrganizationTypeEqualFold(v string) predicate.History {
	return predicate.History(sql.FieldEqualFold(FieldOrganizationType, v))
}

// OrganizationTypeContainsFold applies the ContainsFold predicate on the "organization_type" field.
func OrganizationTypeContainsFold(v string) predicate.History {
	return predicate.History(sql.FieldContainsFold(FieldOrganizationType, v))
}

// FacilityTypeEQ applies the EQ predicate on the "facility_type" field.
func FacilityTypeEQ(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldFacilityType, v))
}

// FacilityTypeNEQ applies the NEQ predicate on the "facility_type" field.
func FacilityTypeNEQ(v string) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldFacilityType, v))
}

// FacilityTypeIn applies the In predicate on the "facility_type" field.
func FacilityTypeIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldIn(FieldFacilityType, vs...))
}

// FacilityTypeNotIn applies the NotIn predicate on the "facility_type" field.
func FacilityTypeNotIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldFacilityType, vs...))
}

// FacilityTypeGT applies the GT predicate on the "facility_type" field.
func FacilityTypeGT(v string) predicate.History {
	return predicate.History(sql.FieldGT(FieldFacilityType, v))
}

// FacilityTypeGTE applies the GTE predicate on the "facility_type" field.
func FacilityTypeGTE(v string) predicate.History {
	return predicate.History(sql.FieldGTE(FieldFacilityType, v))
}

// FacilityTypeLT applies the LT predicate on the "facility_type" field.
func FacilityTypeLT(v string) predicate.History {
	return predicate.History(sql.FieldLT(FieldFacilityType, v))
}

// FacilityTypeLTE applies the LTE predicate on the "facility_type" field.
func FacilityTypeLTE(v string) predicate.History {
	return predicate.History(sql.FieldLTE(FieldFacilityType, v))
}

// FacilityTypeContains applies the Contains predicate on the "facility_type" field.
func FacilityTypeContains(v string) predicate.History {
	return predicate.History(sql.FieldContains(FieldFacilityType, v))
}

// FacilityTypeHasPrefix applies the HasPrefix predicate on the "facility_type" field.
func FacilityTypeHasPrefix(v string) predicate.History {
	return predicate.History(sql.FieldHasPrefix(FieldFacilityType, v))
}

// FacilityTypeHasSuffix applies the HasSuffix predicate on the "facility_type" field.
func FacilityTypeHasSuffix(v string) predicate.History {
	return predicate.History(sql.FieldHasSuffix(FieldFacilityType, v))
}

// FacilityTypeEqualFold applies the EqualFold predicate on the "facility_type" field.
func FacilityTypeEqualFold(v string) predicate.History {
	return predicate.History(sql.FieldEqualFold(FieldFacilityType, v))
}

// FacilityTypeContainsFold applies the ContainsFold predicate on the "facility_type" field.
func FacilityTypeContainsFold(v string) predicate.History {
	return predicate.History(sql.FieldContainsFold(FieldFacilityType, v))
}

// AccountingServicesEQ applies the EQ predicate on the "accounting_services" field.
func AccountingServicesEQ(v bool) predicate.History {
	return predicate.History(sql.FieldEQ(FieldAccountingServices, v))
}

// AccountingServicesNEQ applies the NEQ predicate on the "accounting_services" field.
func AccountingServicesNEQ(v bool) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldAccountingServices, v))
}

// PatentEQ applies the EQ predicate on the "patent" field.
func PatentEQ(v bool) predicate.History {
	return predicate.History(sql.FieldEQ(FieldPatent, v))
}

// PatentNEQ applies the NEQ predicate on the "patent" field.
func PatentNEQ(v bool) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldPatent, v))
}

// OtherEQ applies the EQ predicate on the "other" field.
func OtherEQ(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldOther, v))
}

// OtherNEQ applies the NEQ predicate on the "other" field.
func OtherNEQ(v string) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldOther, v))
}

// OtherIn applies the In predicate on the "other" field.
func OtherIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldIn(FieldOther, vs...))
}

// OtherNotIn applies the NotIn predicate on the "other" field.
func OtherNotIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldOther, vs...))
}

// OtherGT applies the GT predicate on the "other" field.
func OtherGT(v string) predicate.History {
	return predicate.History(sql.FieldGT(FieldOther, v))
}

// OtherGTE applies the GTE predicate on the "other" field.
func OtherGTE(v string) predicate.History {
	return predicate.History(sql.FieldGTE(FieldOther, v))
}

// OtherLT applies the LT predicate on the "other" field.
func OtherLT(v string) predicate.History {
	return predicate.History(sql.FieldLT(FieldOther, v))
}

// OtherLTE applies the LTE predicate on the "other" field.
func OtherLTE(v string) predicate.History {
	return predicate.History(sql.FieldLTE(FieldOther, v))
}

// OtherContains applies the Contains predicate on the "other" field.
func OtherContains(v string) predicate.History {
	return predicate.History(sql.FieldContains(FieldOther, v))
}

// OtherHasPrefix applies the HasPrefix predicate on the "other" field.
func OtherHasPrefix(v string) predicate.History {
	return predicate.History(sql.FieldHasPrefix(FieldOther, v))
}

// OtherHasSuffix applies the HasSuffix predicate on the "other" field.
func OtherHasSuffix(v string) predicate.History {
	return predicate.History(sql.FieldHasSuffix(FieldOther, v))
}

// OtherEqualFold applies the EqualFold predicate on the "other" field.
func OtherEqualFold(v string) predicate.History {
	return predicate.History(sql.FieldEqualFold(FieldOther, v))
}

// OtherContainsFold applies the ContainsFold predicate on the "other" field.
func OtherContainsFold(v string) predicate.History {
	return predicate.History(sql.FieldContainsFold(FieldOther, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.History {
	return predicate.History(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.History {
	return predicate.History(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldUserID, vs...))
}

// HasIndustry applies the HasEdge predicate on the "industry" edge.
func HasIndustry() predicate.History {
	return predicate.History(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, IndustryTable, IndustryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIndustryWith applies the HasEdge predicate on the "industry" edge with a given conditions (other predicates).
func HasIndustryWith(preds ...predicate.Industry) predicate.History {
	return predicate.History(func(s *sql.Selector) {
		step := newIndustryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDistrict applies the HasEdge predicate on the "district" edge.
func HasDistrict() predicate.History {
	return predicate.History(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DistrictTable, DistrictColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDistrictWith applies the HasEdge predicate on the "district" edge with a given conditions (other predicates).
func HasDistrictWith(preds ...predicate.District) predicate.History {
	return predicate.History(func(s *sql.Selector) {
		step := newDistrictStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEquipment applies the HasEdge predicate on the "equipment" edge.
func HasEquipment() predicate.History {
	return predicate.History(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EquipmentTable, EquipmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEquipmentWith applies the HasEdge predicate on the "equipment" edge with a given conditions (other predicates).
func HasEquipmentWith(preds ...predicate.Equipment) predicate.History {
	return predicate.History(func(s *sql.Selector) {
		step := newEquipmentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.History {
	return predicate.History(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UsersTable, UsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.User) predicate.History {
	return predicate.History(func(s *sql.Selector) {
		step := newUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.History) predicate.History {
	return predicate.History(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.History) predicate.History {
	return predicate.History(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.History) predicate.History {
	return predicate.History(func(s *sql.Selector) {
		p(s.Not())
	})
}
