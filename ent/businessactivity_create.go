// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/while-act/hackathon-backend/ent/businessactivity"
	"github.com/while-act/hackathon-backend/ent/history"
)

// BusinessActivityCreate is the builder for creating a BusinessActivity entity.
type BusinessActivityCreate struct {
	config
	mutation *BusinessActivityMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (bac *BusinessActivityCreate) SetType(s string) *BusinessActivityCreate {
	bac.mutation.SetType(s)
	return bac
}

// SetSubType sets the "sub_type" field.
func (bac *BusinessActivityCreate) SetSubType(s string) *BusinessActivityCreate {
	bac.mutation.SetSubType(s)
	return bac
}

// SetTotal sets the "total" field.
func (bac *BusinessActivityCreate) SetTotal(f float64) *BusinessActivityCreate {
	bac.mutation.SetTotal(f)
	return bac
}

// AddHistoryIDs adds the "histories" edge to the History entity by IDs.
func (bac *BusinessActivityCreate) AddHistoryIDs(ids ...int) *BusinessActivityCreate {
	bac.mutation.AddHistoryIDs(ids...)
	return bac
}

// AddHistories adds the "histories" edges to the History entity.
func (bac *BusinessActivityCreate) AddHistories(h ...*History) *BusinessActivityCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return bac.AddHistoryIDs(ids...)
}

// Mutation returns the BusinessActivityMutation object of the builder.
func (bac *BusinessActivityCreate) Mutation() *BusinessActivityMutation {
	return bac.mutation
}

// Save creates the BusinessActivity in the database.
func (bac *BusinessActivityCreate) Save(ctx context.Context) (*BusinessActivity, error) {
	return withHooks(ctx, bac.sqlSave, bac.mutation, bac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bac *BusinessActivityCreate) SaveX(ctx context.Context) *BusinessActivity {
	v, err := bac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bac *BusinessActivityCreate) Exec(ctx context.Context) error {
	_, err := bac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bac *BusinessActivityCreate) ExecX(ctx context.Context) {
	if err := bac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bac *BusinessActivityCreate) check() error {
	if _, ok := bac.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "BusinessActivityId.type"`)}
	}
	if _, ok := bac.mutation.SubType(); !ok {
		return &ValidationError{Name: "sub_type", err: errors.New(`ent: missing required field "BusinessActivityId.sub_type"`)}
	}
	if _, ok := bac.mutation.Total(); !ok {
		return &ValidationError{Name: "total", err: errors.New(`ent: missing required field "BusinessActivityId.total"`)}
	}
	if v, ok := bac.mutation.Total(); ok {
		if err := businessactivity.TotalValidator(v); err != nil {
			return &ValidationError{Name: "total", err: fmt.Errorf(`ent: validator failed for field "BusinessActivityId.total": %w`, err)}
		}
	}
	return nil
}

func (bac *BusinessActivityCreate) sqlSave(ctx context.Context) (*BusinessActivity, error) {
	if err := bac.check(); err != nil {
		return nil, err
	}
	_node, _spec := bac.createSpec()
	if err := sqlgraph.CreateNode(ctx, bac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	bac.mutation.id = &_node.ID
	bac.mutation.done = true
	return _node, nil
}

func (bac *BusinessActivityCreate) createSpec() (*BusinessActivity, *sqlgraph.CreateSpec) {
	var (
		_node = &BusinessActivity{config: bac.config}
		_spec = sqlgraph.NewCreateSpec(businessactivity.Table, sqlgraph.NewFieldSpec(businessactivity.FieldID, field.TypeInt))
	)
	if value, ok := bac.mutation.GetType(); ok {
		_spec.SetField(businessactivity.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := bac.mutation.SubType(); ok {
		_spec.SetField(businessactivity.FieldSubType, field.TypeString, value)
		_node.SubType = value
	}
	if value, ok := bac.mutation.Total(); ok {
		_spec.SetField(businessactivity.FieldTotal, field.TypeFloat64, value)
		_node.Total = value
	}
	if nodes := bac.mutation.HistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   businessactivity.HistoriesTable,
			Columns: []string{businessactivity.HistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BusinessActivityCreateBulk is the builder for creating many BusinessActivity entities in bulk.
type BusinessActivityCreateBulk struct {
	config
	builders []*BusinessActivityCreate
}

// Save creates the BusinessActivity entities in the database.
func (bacb *BusinessActivityCreateBulk) Save(ctx context.Context) ([]*BusinessActivity, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bacb.builders))
	nodes := make([]*BusinessActivity, len(bacb.builders))
	mutators := make([]Mutator, len(bacb.builders))
	for i := range bacb.builders {
		func(i int, root context.Context) {
			builder := bacb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BusinessActivityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bacb *BusinessActivityCreateBulk) SaveX(ctx context.Context) []*BusinessActivity {
	v, err := bacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bacb *BusinessActivityCreateBulk) Exec(ctx context.Context) error {
	_, err := bacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bacb *BusinessActivityCreateBulk) ExecX(ctx context.Context) {
	if err := bacb.Exec(ctx); err != nil {
		panic(err)
	}
}
