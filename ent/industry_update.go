// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/while-act/hackathon-backend/ent/history"
	"github.com/while-act/hackathon-backend/ent/industry"
	"github.com/while-act/hackathon-backend/ent/predicate"
)

// IndustryUpdate is the builder for updating Industry entities.
type IndustryUpdate struct {
	config
	hooks    []Hook
	mutation *IndustryMutation
}

// Where appends a list predicates to the IndustryUpdate builder.
func (iu *IndustryUpdate) Where(ps ...predicate.Industry) *IndustryUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetAvgWorkersNum sets the "avg_workers_num" field.
func (iu *IndustryUpdate) SetAvgWorkersNum(f float64) *IndustryUpdate {
	iu.mutation.ResetAvgWorkersNum()
	iu.mutation.SetAvgWorkersNum(f)
	return iu
}

// AddAvgWorkersNum adds f to the "avg_workers_num" field.
func (iu *IndustryUpdate) AddAvgWorkersNum(f float64) *IndustryUpdate {
	iu.mutation.AddAvgWorkersNum(f)
	return iu
}

// SetAvgWorkersNumCad sets the "avg_workers_num_cad" field.
func (iu *IndustryUpdate) SetAvgWorkersNumCad(f float64) *IndustryUpdate {
	iu.mutation.ResetAvgWorkersNumCad()
	iu.mutation.SetAvgWorkersNumCad(f)
	return iu
}

// AddAvgWorkersNumCad adds f to the "avg_workers_num_cad" field.
func (iu *IndustryUpdate) AddAvgWorkersNumCad(f float64) *IndustryUpdate {
	iu.mutation.AddAvgWorkersNumCad(f)
	return iu
}

// SetAvgSalary sets the "avg_salary" field.
func (iu *IndustryUpdate) SetAvgSalary(f float64) *IndustryUpdate {
	iu.mutation.ResetAvgSalary()
	iu.mutation.SetAvgSalary(f)
	return iu
}

// AddAvgSalary adds f to the "avg_salary" field.
func (iu *IndustryUpdate) AddAvgSalary(f float64) *IndustryUpdate {
	iu.mutation.AddAvgSalary(f)
	return iu
}

// SetAvgSalaryCad sets the "avg_salary_cad" field.
func (iu *IndustryUpdate) SetAvgSalaryCad(f float64) *IndustryUpdate {
	iu.mutation.ResetAvgSalaryCad()
	iu.mutation.SetAvgSalaryCad(f)
	return iu
}

// AddAvgSalaryCad adds f to the "avg_salary_cad" field.
func (iu *IndustryUpdate) AddAvgSalaryCad(f float64) *IndustryUpdate {
	iu.mutation.AddAvgSalaryCad(f)
	return iu
}

// AddHistoryIDs adds the "histories" edge to the History entity by IDs.
func (iu *IndustryUpdate) AddHistoryIDs(ids ...string) *IndustryUpdate {
	iu.mutation.AddHistoryIDs(ids...)
	return iu
}

// AddHistories adds the "histories" edges to the History entity.
func (iu *IndustryUpdate) AddHistories(h ...*History) *IndustryUpdate {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return iu.AddHistoryIDs(ids...)
}

// Mutation returns the IndustryMutation object of the builder.
func (iu *IndustryUpdate) Mutation() *IndustryMutation {
	return iu.mutation
}

// ClearHistories clears all "histories" edges to the History entity.
func (iu *IndustryUpdate) ClearHistories() *IndustryUpdate {
	iu.mutation.ClearHistories()
	return iu
}

// RemoveHistoryIDs removes the "histories" edge to History entities by IDs.
func (iu *IndustryUpdate) RemoveHistoryIDs(ids ...string) *IndustryUpdate {
	iu.mutation.RemoveHistoryIDs(ids...)
	return iu
}

// RemoveHistories removes "histories" edges to History entities.
func (iu *IndustryUpdate) RemoveHistories(h ...*History) *IndustryUpdate {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return iu.RemoveHistoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *IndustryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *IndustryUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *IndustryUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *IndustryUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *IndustryUpdate) check() error {
	if v, ok := iu.mutation.AvgWorkersNum(); ok {
		if err := industry.AvgWorkersNumValidator(v); err != nil {
			return &ValidationError{Name: "avg_workers_num", err: fmt.Errorf(`ent: validator failed for field "Industry.avg_workers_num": %w`, err)}
		}
	}
	if v, ok := iu.mutation.AvgWorkersNumCad(); ok {
		if err := industry.AvgWorkersNumCadValidator(v); err != nil {
			return &ValidationError{Name: "avg_workers_num_cad", err: fmt.Errorf(`ent: validator failed for field "Industry.avg_workers_num_cad": %w`, err)}
		}
	}
	if v, ok := iu.mutation.AvgSalary(); ok {
		if err := industry.AvgSalaryValidator(v); err != nil {
			return &ValidationError{Name: "avg_salary", err: fmt.Errorf(`ent: validator failed for field "Industry.avg_salary": %w`, err)}
		}
	}
	if v, ok := iu.mutation.AvgSalaryCad(); ok {
		if err := industry.AvgSalaryCadValidator(v); err != nil {
			return &ValidationError{Name: "avg_salary_cad", err: fmt.Errorf(`ent: validator failed for field "Industry.avg_salary_cad": %w`, err)}
		}
	}
	return nil
}

func (iu *IndustryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(industry.Table, industry.Columns, sqlgraph.NewFieldSpec(industry.FieldID, field.TypeString))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.AvgWorkersNum(); ok {
		_spec.SetField(industry.FieldAvgWorkersNum, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.AddedAvgWorkersNum(); ok {
		_spec.AddField(industry.FieldAvgWorkersNum, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.AvgWorkersNumCad(); ok {
		_spec.SetField(industry.FieldAvgWorkersNumCad, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.AddedAvgWorkersNumCad(); ok {
		_spec.AddField(industry.FieldAvgWorkersNumCad, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.AvgSalary(); ok {
		_spec.SetField(industry.FieldAvgSalary, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.AddedAvgSalary(); ok {
		_spec.AddField(industry.FieldAvgSalary, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.AvgSalaryCad(); ok {
		_spec.SetField(industry.FieldAvgSalaryCad, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.AddedAvgSalaryCad(); ok {
		_spec.AddField(industry.FieldAvgSalaryCad, field.TypeFloat64, value)
	}
	if iu.mutation.HistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   industry.HistoriesTable,
			Columns: []string{industry.HistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedHistoriesIDs(); len(nodes) > 0 && !iu.mutation.HistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   industry.HistoriesTable,
			Columns: []string{industry.HistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.HistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   industry.HistoriesTable,
			Columns: []string{industry.HistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{industry.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// IndustryUpdateOne is the builder for updating a single Industry entity.
type IndustryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IndustryMutation
}

// SetAvgWorkersNum sets the "avg_workers_num" field.
func (iuo *IndustryUpdateOne) SetAvgWorkersNum(f float64) *IndustryUpdateOne {
	iuo.mutation.ResetAvgWorkersNum()
	iuo.mutation.SetAvgWorkersNum(f)
	return iuo
}

// AddAvgWorkersNum adds f to the "avg_workers_num" field.
func (iuo *IndustryUpdateOne) AddAvgWorkersNum(f float64) *IndustryUpdateOne {
	iuo.mutation.AddAvgWorkersNum(f)
	return iuo
}

// SetAvgWorkersNumCad sets the "avg_workers_num_cad" field.
func (iuo *IndustryUpdateOne) SetAvgWorkersNumCad(f float64) *IndustryUpdateOne {
	iuo.mutation.ResetAvgWorkersNumCad()
	iuo.mutation.SetAvgWorkersNumCad(f)
	return iuo
}

// AddAvgWorkersNumCad adds f to the "avg_workers_num_cad" field.
func (iuo *IndustryUpdateOne) AddAvgWorkersNumCad(f float64) *IndustryUpdateOne {
	iuo.mutation.AddAvgWorkersNumCad(f)
	return iuo
}

// SetAvgSalary sets the "avg_salary" field.
func (iuo *IndustryUpdateOne) SetAvgSalary(f float64) *IndustryUpdateOne {
	iuo.mutation.ResetAvgSalary()
	iuo.mutation.SetAvgSalary(f)
	return iuo
}

// AddAvgSalary adds f to the "avg_salary" field.
func (iuo *IndustryUpdateOne) AddAvgSalary(f float64) *IndustryUpdateOne {
	iuo.mutation.AddAvgSalary(f)
	return iuo
}

// SetAvgSalaryCad sets the "avg_salary_cad" field.
func (iuo *IndustryUpdateOne) SetAvgSalaryCad(f float64) *IndustryUpdateOne {
	iuo.mutation.ResetAvgSalaryCad()
	iuo.mutation.SetAvgSalaryCad(f)
	return iuo
}

// AddAvgSalaryCad adds f to the "avg_salary_cad" field.
func (iuo *IndustryUpdateOne) AddAvgSalaryCad(f float64) *IndustryUpdateOne {
	iuo.mutation.AddAvgSalaryCad(f)
	return iuo
}

// AddHistoryIDs adds the "histories" edge to the History entity by IDs.
func (iuo *IndustryUpdateOne) AddHistoryIDs(ids ...string) *IndustryUpdateOne {
	iuo.mutation.AddHistoryIDs(ids...)
	return iuo
}

// AddHistories adds the "histories" edges to the History entity.
func (iuo *IndustryUpdateOne) AddHistories(h ...*History) *IndustryUpdateOne {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return iuo.AddHistoryIDs(ids...)
}

// Mutation returns the IndustryMutation object of the builder.
func (iuo *IndustryUpdateOne) Mutation() *IndustryMutation {
	return iuo.mutation
}

// ClearHistories clears all "histories" edges to the History entity.
func (iuo *IndustryUpdateOne) ClearHistories() *IndustryUpdateOne {
	iuo.mutation.ClearHistories()
	return iuo
}

// RemoveHistoryIDs removes the "histories" edge to History entities by IDs.
func (iuo *IndustryUpdateOne) RemoveHistoryIDs(ids ...string) *IndustryUpdateOne {
	iuo.mutation.RemoveHistoryIDs(ids...)
	return iuo
}

// RemoveHistories removes "histories" edges to History entities.
func (iuo *IndustryUpdateOne) RemoveHistories(h ...*History) *IndustryUpdateOne {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return iuo.RemoveHistoryIDs(ids...)
}

// Where appends a list predicates to the IndustryUpdate builder.
func (iuo *IndustryUpdateOne) Where(ps ...predicate.Industry) *IndustryUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *IndustryUpdateOne) Select(field string, fields ...string) *IndustryUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Industry entity.
func (iuo *IndustryUpdateOne) Save(ctx context.Context) (*Industry, error) {
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *IndustryUpdateOne) SaveX(ctx context.Context) *Industry {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *IndustryUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *IndustryUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *IndustryUpdateOne) check() error {
	if v, ok := iuo.mutation.AvgWorkersNum(); ok {
		if err := industry.AvgWorkersNumValidator(v); err != nil {
			return &ValidationError{Name: "avg_workers_num", err: fmt.Errorf(`ent: validator failed for field "Industry.avg_workers_num": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.AvgWorkersNumCad(); ok {
		if err := industry.AvgWorkersNumCadValidator(v); err != nil {
			return &ValidationError{Name: "avg_workers_num_cad", err: fmt.Errorf(`ent: validator failed for field "Industry.avg_workers_num_cad": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.AvgSalary(); ok {
		if err := industry.AvgSalaryValidator(v); err != nil {
			return &ValidationError{Name: "avg_salary", err: fmt.Errorf(`ent: validator failed for field "Industry.avg_salary": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.AvgSalaryCad(); ok {
		if err := industry.AvgSalaryCadValidator(v); err != nil {
			return &ValidationError{Name: "avg_salary_cad", err: fmt.Errorf(`ent: validator failed for field "Industry.avg_salary_cad": %w`, err)}
		}
	}
	return nil
}

func (iuo *IndustryUpdateOne) sqlSave(ctx context.Context) (_node *Industry, err error) {
	if err := iuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(industry.Table, industry.Columns, sqlgraph.NewFieldSpec(industry.FieldID, field.TypeString))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Industry.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, industry.FieldID)
		for _, f := range fields {
			if !industry.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != industry.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.AvgWorkersNum(); ok {
		_spec.SetField(industry.FieldAvgWorkersNum, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.AddedAvgWorkersNum(); ok {
		_spec.AddField(industry.FieldAvgWorkersNum, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.AvgWorkersNumCad(); ok {
		_spec.SetField(industry.FieldAvgWorkersNumCad, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.AddedAvgWorkersNumCad(); ok {
		_spec.AddField(industry.FieldAvgWorkersNumCad, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.AvgSalary(); ok {
		_spec.SetField(industry.FieldAvgSalary, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.AddedAvgSalary(); ok {
		_spec.AddField(industry.FieldAvgSalary, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.AvgSalaryCad(); ok {
		_spec.SetField(industry.FieldAvgSalaryCad, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.AddedAvgSalaryCad(); ok {
		_spec.AddField(industry.FieldAvgSalaryCad, field.TypeFloat64, value)
	}
	if iuo.mutation.HistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   industry.HistoriesTable,
			Columns: []string{industry.HistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedHistoriesIDs(); len(nodes) > 0 && !iuo.mutation.HistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   industry.HistoriesTable,
			Columns: []string{industry.HistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.HistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   industry.HistoriesTable,
			Columns: []string{industry.HistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Industry{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{industry.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
