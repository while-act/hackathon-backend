// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/while-act/hackathon-backend/ent/businessactivity"
	"github.com/while-act/hackathon-backend/ent/predicate"
)

// BusinessActivityDelete is the builder for deleting a BusinessActivity entity.
type BusinessActivityDelete struct {
	config
	hooks    []Hook
	mutation *BusinessActivityMutation
}

// Where appends a list predicates to the BusinessActivityDelete builder.
func (bad *BusinessActivityDelete) Where(ps ...predicate.BusinessActivity) *BusinessActivityDelete {
	bad.mutation.Where(ps...)
	return bad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (bad *BusinessActivityDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, bad.sqlExec, bad.mutation, bad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (bad *BusinessActivityDelete) ExecX(ctx context.Context) int {
	n, err := bad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (bad *BusinessActivityDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(businessactivity.Table, sqlgraph.NewFieldSpec(businessactivity.FieldID, field.TypeInt))
	if ps := bad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, bad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	bad.mutation.done = true
	return affected, err
}

// BusinessActivityDeleteOne is the builder for deleting a single BusinessActivity entity.
type BusinessActivityDeleteOne struct {
	bad *BusinessActivityDelete
}

// Where appends a list predicates to the BusinessActivityDelete builder.
func (bado *BusinessActivityDeleteOne) Where(ps ...predicate.BusinessActivity) *BusinessActivityDeleteOne {
	bado.bad.mutation.Where(ps...)
	return bado
}

// Exec executes the deletion query.
func (bado *BusinessActivityDeleteOne) Exec(ctx context.Context) error {
	n, err := bado.bad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{businessactivity.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (bado *BusinessActivityDeleteOne) ExecX(ctx context.Context) {
	if err := bado.Exec(ctx); err != nil {
		panic(err)
	}
}
