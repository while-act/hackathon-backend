// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wtkeqrf0/while.act/ent/economicactivity"
)

// EconomicActivityCreate is the builder for creating a EconomicActivity entity.
type EconomicActivityCreate struct {
	config
	mutation *EconomicActivityMutation
	hooks    []Hook
}

// SetSubs sets the "subs" field.
func (eac *EconomicActivityCreate) SetSubs(s string) *EconomicActivityCreate {
	eac.mutation.SetSubs(s)
	return eac
}

// SetNillableSubs sets the "subs" field if the given value is not nil.
func (eac *EconomicActivityCreate) SetNillableSubs(s *string) *EconomicActivityCreate {
	if s != nil {
		eac.SetSubs(*s)
	}
	return eac
}

// SetID sets the "id" field.
func (eac *EconomicActivityCreate) SetID(s string) *EconomicActivityCreate {
	eac.mutation.SetID(s)
	return eac
}

// Mutation returns the EconomicActivityMutation object of the builder.
func (eac *EconomicActivityCreate) Mutation() *EconomicActivityMutation {
	return eac.mutation
}

// Save creates the EconomicActivity in the database.
func (eac *EconomicActivityCreate) Save(ctx context.Context) (*EconomicActivity, error) {
	return withHooks(ctx, eac.sqlSave, eac.mutation, eac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (eac *EconomicActivityCreate) SaveX(ctx context.Context) *EconomicActivity {
	v, err := eac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eac *EconomicActivityCreate) Exec(ctx context.Context) error {
	_, err := eac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eac *EconomicActivityCreate) ExecX(ctx context.Context) {
	if err := eac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eac *EconomicActivityCreate) check() error {
	if v, ok := eac.mutation.Subs(); ok {
		if err := economicactivity.SubsValidator(v); err != nil {
			return &ValidationError{Name: "subs", err: fmt.Errorf(`ent: validator failed for field "EconomicActivity.subs": %w`, err)}
		}
	}
	if v, ok := eac.mutation.ID(); ok {
		if err := economicactivity.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "EconomicActivity.id": %w`, err)}
		}
	}
	return nil
}

func (eac *EconomicActivityCreate) sqlSave(ctx context.Context) (*EconomicActivity, error) {
	if err := eac.check(); err != nil {
		return nil, err
	}
	_node, _spec := eac.createSpec()
	if err := sqlgraph.CreateNode(ctx, eac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected EconomicActivity.ID type: %T", _spec.ID.Value)
		}
	}
	eac.mutation.id = &_node.ID
	eac.mutation.done = true
	return _node, nil
}

func (eac *EconomicActivityCreate) createSpec() (*EconomicActivity, *sqlgraph.CreateSpec) {
	var (
		_node = &EconomicActivity{config: eac.config}
		_spec = sqlgraph.NewCreateSpec(economicactivity.Table, sqlgraph.NewFieldSpec(economicactivity.FieldID, field.TypeString))
	)
	if id, ok := eac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := eac.mutation.Subs(); ok {
		_spec.SetField(economicactivity.FieldSubs, field.TypeString, value)
		_node.Subs = value
	}
	return _node, _spec
}

// EconomicActivityCreateBulk is the builder for creating many EconomicActivity entities in bulk.
type EconomicActivityCreateBulk struct {
	config
	builders []*EconomicActivityCreate
}

// Save creates the EconomicActivity entities in the database.
func (eacb *EconomicActivityCreateBulk) Save(ctx context.Context) ([]*EconomicActivity, error) {
	specs := make([]*sqlgraph.CreateSpec, len(eacb.builders))
	nodes := make([]*EconomicActivity, len(eacb.builders))
	mutators := make([]Mutator, len(eacb.builders))
	for i := range eacb.builders {
		func(i int, root context.Context) {
			builder := eacb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EconomicActivityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, eacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, eacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, eacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (eacb *EconomicActivityCreateBulk) SaveX(ctx context.Context) []*EconomicActivity {
	v, err := eacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eacb *EconomicActivityCreateBulk) Exec(ctx context.Context) error {
	_, err := eacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eacb *EconomicActivityCreateBulk) ExecX(ctx context.Context) {
	if err := eacb.Exec(ctx); err != nil {
		panic(err)
	}
}
