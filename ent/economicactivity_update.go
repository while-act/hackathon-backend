// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wtkeqrf0/while.act/ent/economicactivity"
	"github.com/wtkeqrf0/while.act/ent/predicate"
)

// EconomicActivityUpdate is the builder for updating EconomicActivity entities.
type EconomicActivityUpdate struct {
	config
	hooks    []Hook
	mutation *EconomicActivityMutation
}

// Where appends a list predicates to the EconomicActivityUpdate builder.
func (eau *EconomicActivityUpdate) Where(ps ...predicate.EconomicActivity) *EconomicActivityUpdate {
	eau.mutation.Where(ps...)
	return eau
}

// SetSubs sets the "subs" field.
func (eau *EconomicActivityUpdate) SetSubs(s string) *EconomicActivityUpdate {
	eau.mutation.SetSubs(s)
	return eau
}

// SetNillableSubs sets the "subs" field if the given value is not nil.
func (eau *EconomicActivityUpdate) SetNillableSubs(s *string) *EconomicActivityUpdate {
	if s != nil {
		eau.SetSubs(*s)
	}
	return eau
}

// ClearSubs clears the value of the "subs" field.
func (eau *EconomicActivityUpdate) ClearSubs() *EconomicActivityUpdate {
	eau.mutation.ClearSubs()
	return eau
}

// Mutation returns the EconomicActivityMutation object of the builder.
func (eau *EconomicActivityUpdate) Mutation() *EconomicActivityMutation {
	return eau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eau *EconomicActivityUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eau.sqlSave, eau.mutation, eau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eau *EconomicActivityUpdate) SaveX(ctx context.Context) int {
	affected, err := eau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eau *EconomicActivityUpdate) Exec(ctx context.Context) error {
	_, err := eau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eau *EconomicActivityUpdate) ExecX(ctx context.Context) {
	if err := eau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eau *EconomicActivityUpdate) check() error {
	if v, ok := eau.mutation.Subs(); ok {
		if err := economicactivity.SubsValidator(v); err != nil {
			return &ValidationError{Name: "subs", err: fmt.Errorf(`ent: validator failed for field "EconomicActivity.subs": %w`, err)}
		}
	}
	return nil
}

func (eau *EconomicActivityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(economicactivity.Table, economicactivity.Columns, sqlgraph.NewFieldSpec(economicactivity.FieldID, field.TypeString))
	if ps := eau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eau.mutation.Subs(); ok {
		_spec.SetField(economicactivity.FieldSubs, field.TypeString, value)
	}
	if eau.mutation.SubsCleared() {
		_spec.ClearField(economicactivity.FieldSubs, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{economicactivity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eau.mutation.done = true
	return n, nil
}

// EconomicActivityUpdateOne is the builder for updating a single EconomicActivity entity.
type EconomicActivityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EconomicActivityMutation
}

// SetSubs sets the "subs" field.
func (eauo *EconomicActivityUpdateOne) SetSubs(s string) *EconomicActivityUpdateOne {
	eauo.mutation.SetSubs(s)
	return eauo
}

// SetNillableSubs sets the "subs" field if the given value is not nil.
func (eauo *EconomicActivityUpdateOne) SetNillableSubs(s *string) *EconomicActivityUpdateOne {
	if s != nil {
		eauo.SetSubs(*s)
	}
	return eauo
}

// ClearSubs clears the value of the "subs" field.
func (eauo *EconomicActivityUpdateOne) ClearSubs() *EconomicActivityUpdateOne {
	eauo.mutation.ClearSubs()
	return eauo
}

// Mutation returns the EconomicActivityMutation object of the builder.
func (eauo *EconomicActivityUpdateOne) Mutation() *EconomicActivityMutation {
	return eauo.mutation
}

// Where appends a list predicates to the EconomicActivityUpdate builder.
func (eauo *EconomicActivityUpdateOne) Where(ps ...predicate.EconomicActivity) *EconomicActivityUpdateOne {
	eauo.mutation.Where(ps...)
	return eauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eauo *EconomicActivityUpdateOne) Select(field string, fields ...string) *EconomicActivityUpdateOne {
	eauo.fields = append([]string{field}, fields...)
	return eauo
}

// Save executes the query and returns the updated EconomicActivity entity.
func (eauo *EconomicActivityUpdateOne) Save(ctx context.Context) (*EconomicActivity, error) {
	return withHooks(ctx, eauo.sqlSave, eauo.mutation, eauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eauo *EconomicActivityUpdateOne) SaveX(ctx context.Context) *EconomicActivity {
	node, err := eauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eauo *EconomicActivityUpdateOne) Exec(ctx context.Context) error {
	_, err := eauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eauo *EconomicActivityUpdateOne) ExecX(ctx context.Context) {
	if err := eauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eauo *EconomicActivityUpdateOne) check() error {
	if v, ok := eauo.mutation.Subs(); ok {
		if err := economicactivity.SubsValidator(v); err != nil {
			return &ValidationError{Name: "subs", err: fmt.Errorf(`ent: validator failed for field "EconomicActivity.subs": %w`, err)}
		}
	}
	return nil
}

func (eauo *EconomicActivityUpdateOne) sqlSave(ctx context.Context) (_node *EconomicActivity, err error) {
	if err := eauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(economicactivity.Table, economicactivity.Columns, sqlgraph.NewFieldSpec(economicactivity.FieldID, field.TypeString))
	id, ok := eauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EconomicActivity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, economicactivity.FieldID)
		for _, f := range fields {
			if !economicactivity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != economicactivity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eauo.mutation.Subs(); ok {
		_spec.SetField(economicactivity.FieldSubs, field.TypeString, value)
	}
	if eauo.mutation.SubsCleared() {
		_spec.ClearField(economicactivity.FieldSubs, field.TypeString)
	}
	_node = &EconomicActivity{config: eauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{economicactivity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	eauo.mutation.done = true
	return _node, nil
}
