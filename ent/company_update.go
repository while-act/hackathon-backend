// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wtkeqrf0/while.act/ent/company"
	"github.com/wtkeqrf0/while.act/ent/predicate"
	"github.com/wtkeqrf0/while.act/ent/user"
)

// CompanyUpdate is the builder for updating Company entities.
type CompanyUpdate struct {
	config
	hooks    []Hook
	mutation *CompanyMutation
}

// Where appends a list predicates to the CompanyUpdate builder.
func (cu *CompanyUpdate) Where(ps ...predicate.Company) *CompanyUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetName sets the "name" field.
func (cu *CompanyUpdate) SetName(s string) *CompanyUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillableName(s *string) *CompanyUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// ClearName clears the value of the "name" field.
func (cu *CompanyUpdate) ClearName() *CompanyUpdate {
	cu.mutation.ClearName()
	return cu
}

// SetWebsite sets the "website" field.
func (cu *CompanyUpdate) SetWebsite(s string) *CompanyUpdate {
	cu.mutation.SetWebsite(s)
	return cu
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillableWebsite(s *string) *CompanyUpdate {
	if s != nil {
		cu.SetWebsite(*s)
	}
	return cu
}

// ClearWebsite clears the value of the "website" field.
func (cu *CompanyUpdate) ClearWebsite() *CompanyUpdate {
	cu.mutation.ClearWebsite()
	return cu
}

// SetEconomicActivityBranch sets the "economic_activity_branch" field.
func (cu *CompanyUpdate) SetEconomicActivityBranch(s string) *CompanyUpdate {
	cu.mutation.SetEconomicActivityBranch(s)
	return cu
}

// SetNillableEconomicActivityBranch sets the "economic_activity_branch" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillableEconomicActivityBranch(s *string) *CompanyUpdate {
	if s != nil {
		cu.SetEconomicActivityBranch(*s)
	}
	return cu
}

// ClearEconomicActivityBranch clears the value of the "economic_activity_branch" field.
func (cu *CompanyUpdate) ClearEconomicActivityBranch() *CompanyUpdate {
	cu.mutation.ClearEconomicActivityBranch()
	return cu
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (cu *CompanyUpdate) SetUsersID(id int) *CompanyUpdate {
	cu.mutation.SetUsersID(id)
	return cu
}

// SetNillableUsersID sets the "users" edge to the User entity by ID if the given value is not nil.
func (cu *CompanyUpdate) SetNillableUsersID(id *int) *CompanyUpdate {
	if id != nil {
		cu = cu.SetUsersID(*id)
	}
	return cu
}

// SetUsers sets the "users" edge to the User entity.
func (cu *CompanyUpdate) SetUsers(u *User) *CompanyUpdate {
	return cu.SetUsersID(u.ID)
}

// Mutation returns the CompanyMutation object of the builder.
func (cu *CompanyUpdate) Mutation() *CompanyMutation {
	return cu.mutation
}

// ClearUsers clears the "users" edge to the User entity.
func (cu *CompanyUpdate) ClearUsers() *CompanyUpdate {
	cu.mutation.ClearUsers()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CompanyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CompanyUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CompanyUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CompanyUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CompanyUpdate) check() error {
	if v, ok := cu.mutation.Name(); ok {
		if err := company.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Company.name": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Website(); ok {
		if err := company.WebsiteValidator(v); err != nil {
			return &ValidationError{Name: "website", err: fmt.Errorf(`ent: validator failed for field "Company.website": %w`, err)}
		}
	}
	if v, ok := cu.mutation.EconomicActivityBranch(); ok {
		if err := company.EconomicActivityBranchValidator(v); err != nil {
			return &ValidationError{Name: "economic_activity_branch", err: fmt.Errorf(`ent: validator failed for field "Company.economic_activity_branch": %w`, err)}
		}
	}
	return nil
}

func (cu *CompanyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(company.Table, company.Columns, sqlgraph.NewFieldSpec(company.FieldID, field.TypeString))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(company.FieldName, field.TypeString, value)
	}
	if cu.mutation.NameCleared() {
		_spec.ClearField(company.FieldName, field.TypeString)
	}
	if value, ok := cu.mutation.Website(); ok {
		_spec.SetField(company.FieldWebsite, field.TypeString, value)
	}
	if cu.mutation.WebsiteCleared() {
		_spec.ClearField(company.FieldWebsite, field.TypeString)
	}
	if value, ok := cu.mutation.EconomicActivityBranch(); ok {
		_spec.SetField(company.FieldEconomicActivityBranch, field.TypeString, value)
	}
	if cu.mutation.EconomicActivityBranchCleared() {
		_spec.ClearField(company.FieldEconomicActivityBranch, field.TypeString)
	}
	if cu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   company.UsersTable,
			Columns: []string{company.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   company.UsersTable,
			Columns: []string{company.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{company.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CompanyUpdateOne is the builder for updating a single Company entity.
type CompanyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CompanyMutation
}

// SetName sets the "name" field.
func (cuo *CompanyUpdateOne) SetName(s string) *CompanyUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableName(s *string) *CompanyUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// ClearName clears the value of the "name" field.
func (cuo *CompanyUpdateOne) ClearName() *CompanyUpdateOne {
	cuo.mutation.ClearName()
	return cuo
}

// SetWebsite sets the "website" field.
func (cuo *CompanyUpdateOne) SetWebsite(s string) *CompanyUpdateOne {
	cuo.mutation.SetWebsite(s)
	return cuo
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableWebsite(s *string) *CompanyUpdateOne {
	if s != nil {
		cuo.SetWebsite(*s)
	}
	return cuo
}

// ClearWebsite clears the value of the "website" field.
func (cuo *CompanyUpdateOne) ClearWebsite() *CompanyUpdateOne {
	cuo.mutation.ClearWebsite()
	return cuo
}

// SetEconomicActivityBranch sets the "economic_activity_branch" field.
func (cuo *CompanyUpdateOne) SetEconomicActivityBranch(s string) *CompanyUpdateOne {
	cuo.mutation.SetEconomicActivityBranch(s)
	return cuo
}

// SetNillableEconomicActivityBranch sets the "economic_activity_branch" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableEconomicActivityBranch(s *string) *CompanyUpdateOne {
	if s != nil {
		cuo.SetEconomicActivityBranch(*s)
	}
	return cuo
}

// ClearEconomicActivityBranch clears the value of the "economic_activity_branch" field.
func (cuo *CompanyUpdateOne) ClearEconomicActivityBranch() *CompanyUpdateOne {
	cuo.mutation.ClearEconomicActivityBranch()
	return cuo
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (cuo *CompanyUpdateOne) SetUsersID(id int) *CompanyUpdateOne {
	cuo.mutation.SetUsersID(id)
	return cuo
}

// SetNillableUsersID sets the "users" edge to the User entity by ID if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableUsersID(id *int) *CompanyUpdateOne {
	if id != nil {
		cuo = cuo.SetUsersID(*id)
	}
	return cuo
}

// SetUsers sets the "users" edge to the User entity.
func (cuo *CompanyUpdateOne) SetUsers(u *User) *CompanyUpdateOne {
	return cuo.SetUsersID(u.ID)
}

// Mutation returns the CompanyMutation object of the builder.
func (cuo *CompanyUpdateOne) Mutation() *CompanyMutation {
	return cuo.mutation
}

// ClearUsers clears the "users" edge to the User entity.
func (cuo *CompanyUpdateOne) ClearUsers() *CompanyUpdateOne {
	cuo.mutation.ClearUsers()
	return cuo
}

// Where appends a list predicates to the CompanyUpdate builder.
func (cuo *CompanyUpdateOne) Where(ps ...predicate.Company) *CompanyUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CompanyUpdateOne) Select(field string, fields ...string) *CompanyUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Company entity.
func (cuo *CompanyUpdateOne) Save(ctx context.Context) (*Company, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CompanyUpdateOne) SaveX(ctx context.Context) *Company {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CompanyUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CompanyUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CompanyUpdateOne) check() error {
	if v, ok := cuo.mutation.Name(); ok {
		if err := company.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Company.name": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Website(); ok {
		if err := company.WebsiteValidator(v); err != nil {
			return &ValidationError{Name: "website", err: fmt.Errorf(`ent: validator failed for field "Company.website": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.EconomicActivityBranch(); ok {
		if err := company.EconomicActivityBranchValidator(v); err != nil {
			return &ValidationError{Name: "economic_activity_branch", err: fmt.Errorf(`ent: validator failed for field "Company.economic_activity_branch": %w`, err)}
		}
	}
	return nil
}

func (cuo *CompanyUpdateOne) sqlSave(ctx context.Context) (_node *Company, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(company.Table, company.Columns, sqlgraph.NewFieldSpec(company.FieldID, field.TypeString))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Company.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, company.FieldID)
		for _, f := range fields {
			if !company.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != company.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(company.FieldName, field.TypeString, value)
	}
	if cuo.mutation.NameCleared() {
		_spec.ClearField(company.FieldName, field.TypeString)
	}
	if value, ok := cuo.mutation.Website(); ok {
		_spec.SetField(company.FieldWebsite, field.TypeString, value)
	}
	if cuo.mutation.WebsiteCleared() {
		_spec.ClearField(company.FieldWebsite, field.TypeString)
	}
	if value, ok := cuo.mutation.EconomicActivityBranch(); ok {
		_spec.SetField(company.FieldEconomicActivityBranch, field.TypeString, value)
	}
	if cuo.mutation.EconomicActivityBranchCleared() {
		_spec.ClearField(company.FieldEconomicActivityBranch, field.TypeString)
	}
	if cuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   company.UsersTable,
			Columns: []string{company.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   company.UsersTable,
			Columns: []string{company.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Company{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{company.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
