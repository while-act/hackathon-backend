// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/while-act/hackathon-backend/ent/district"
	"github.com/while-act/hackathon-backend/ent/history"
	"github.com/while-act/hackathon-backend/ent/predicate"
)

// DistrictUpdate is the builder for updating District entities.
type DistrictUpdate struct {
	config
	hooks    []Hook
	mutation *DistrictMutation
}

// Where appends a list predicates to the DistrictUpdate builder.
func (du *DistrictUpdate) Where(ps ...predicate.District) *DistrictUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetAvgCadastralVal sets the "avg_cadastral_val" field.
func (du *DistrictUpdate) SetAvgCadastralVal(f float64) *DistrictUpdate {
	du.mutation.ResetAvgCadastralVal()
	du.mutation.SetAvgCadastralVal(f)
	return du
}

// AddAvgCadastralVal adds f to the "avg_cadastral_val" field.
func (du *DistrictUpdate) AddAvgCadastralVal(f float64) *DistrictUpdate {
	du.mutation.AddAvgCadastralVal(f)
	return du
}

// AddHistoryIDs adds the "histories" edge to the History entity by IDs.
func (du *DistrictUpdate) AddHistoryIDs(ids ...int) *DistrictUpdate {
	du.mutation.AddHistoryIDs(ids...)
	return du
}

// AddHistories adds the "histories" edges to the History entity.
func (du *DistrictUpdate) AddHistories(h ...*History) *DistrictUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return du.AddHistoryIDs(ids...)
}

// Mutation returns the DistrictMutation object of the builder.
func (du *DistrictUpdate) Mutation() *DistrictMutation {
	return du.mutation
}

// ClearHistories clears all "histories" edges to the History entity.
func (du *DistrictUpdate) ClearHistories() *DistrictUpdate {
	du.mutation.ClearHistories()
	return du
}

// RemoveHistoryIDs removes the "histories" edge to History entities by IDs.
func (du *DistrictUpdate) RemoveHistoryIDs(ids ...int) *DistrictUpdate {
	du.mutation.RemoveHistoryIDs(ids...)
	return du
}

// RemoveHistories removes "histories" edges to History entities.
func (du *DistrictUpdate) RemoveHistories(h ...*History) *DistrictUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return du.RemoveHistoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DistrictUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DistrictUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DistrictUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DistrictUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DistrictUpdate) check() error {
	if v, ok := du.mutation.AvgCadastralVal(); ok {
		if err := district.AvgCadastralValValidator(v); err != nil {
			return &ValidationError{Name: "avg_cadastral_val", err: fmt.Errorf(`ent: validator failed for field "District.avg_cadastral_val": %w`, err)}
		}
	}
	return nil
}

func (du *DistrictUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := du.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(district.Table, district.Columns, sqlgraph.NewFieldSpec(district.FieldID, field.TypeString))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.AvgCadastralVal(); ok {
		_spec.SetField(district.FieldAvgCadastralVal, field.TypeFloat64, value)
	}
	if value, ok := du.mutation.AddedAvgCadastralVal(); ok {
		_spec.AddField(district.FieldAvgCadastralVal, field.TypeFloat64, value)
	}
	if du.mutation.HistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   district.HistoriesTable,
			Columns: []string{district.HistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedHistoriesIDs(); len(nodes) > 0 && !du.mutation.HistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   district.HistoriesTable,
			Columns: []string{district.HistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.HistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   district.HistoriesTable,
			Columns: []string{district.HistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{district.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DistrictUpdateOne is the builder for updating a single District entity.
type DistrictUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DistrictMutation
}

// SetAvgCadastralVal sets the "avg_cadastral_val" field.
func (duo *DistrictUpdateOne) SetAvgCadastralVal(f float64) *DistrictUpdateOne {
	duo.mutation.ResetAvgCadastralVal()
	duo.mutation.SetAvgCadastralVal(f)
	return duo
}

// AddAvgCadastralVal adds f to the "avg_cadastral_val" field.
func (duo *DistrictUpdateOne) AddAvgCadastralVal(f float64) *DistrictUpdateOne {
	duo.mutation.AddAvgCadastralVal(f)
	return duo
}

// AddHistoryIDs adds the "histories" edge to the History entity by IDs.
func (duo *DistrictUpdateOne) AddHistoryIDs(ids ...int) *DistrictUpdateOne {
	duo.mutation.AddHistoryIDs(ids...)
	return duo
}

// AddHistories adds the "histories" edges to the History entity.
func (duo *DistrictUpdateOne) AddHistories(h ...*History) *DistrictUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return duo.AddHistoryIDs(ids...)
}

// Mutation returns the DistrictMutation object of the builder.
func (duo *DistrictUpdateOne) Mutation() *DistrictMutation {
	return duo.mutation
}

// ClearHistories clears all "histories" edges to the History entity.
func (duo *DistrictUpdateOne) ClearHistories() *DistrictUpdateOne {
	duo.mutation.ClearHistories()
	return duo
}

// RemoveHistoryIDs removes the "histories" edge to History entities by IDs.
func (duo *DistrictUpdateOne) RemoveHistoryIDs(ids ...int) *DistrictUpdateOne {
	duo.mutation.RemoveHistoryIDs(ids...)
	return duo
}

// RemoveHistories removes "histories" edges to History entities.
func (duo *DistrictUpdateOne) RemoveHistories(h ...*History) *DistrictUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return duo.RemoveHistoryIDs(ids...)
}

// Where appends a list predicates to the DistrictUpdate builder.
func (duo *DistrictUpdateOne) Where(ps ...predicate.District) *DistrictUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DistrictUpdateOne) Select(field string, fields ...string) *DistrictUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated District entity.
func (duo *DistrictUpdateOne) Save(ctx context.Context) (*District, error) {
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DistrictUpdateOne) SaveX(ctx context.Context) *District {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DistrictUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DistrictUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DistrictUpdateOne) check() error {
	if v, ok := duo.mutation.AvgCadastralVal(); ok {
		if err := district.AvgCadastralValValidator(v); err != nil {
			return &ValidationError{Name: "avg_cadastral_val", err: fmt.Errorf(`ent: validator failed for field "District.avg_cadastral_val": %w`, err)}
		}
	}
	return nil
}

func (duo *DistrictUpdateOne) sqlSave(ctx context.Context) (_node *District, err error) {
	if err := duo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(district.Table, district.Columns, sqlgraph.NewFieldSpec(district.FieldID, field.TypeString))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "District.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, district.FieldID)
		for _, f := range fields {
			if !district.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != district.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.AvgCadastralVal(); ok {
		_spec.SetField(district.FieldAvgCadastralVal, field.TypeFloat64, value)
	}
	if value, ok := duo.mutation.AddedAvgCadastralVal(); ok {
		_spec.AddField(district.FieldAvgCadastralVal, field.TypeFloat64, value)
	}
	if duo.mutation.HistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   district.HistoriesTable,
			Columns: []string{district.HistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedHistoriesIDs(); len(nodes) > 0 && !duo.mutation.HistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   district.HistoriesTable,
			Columns: []string{district.HistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.HistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   district.HistoriesTable,
			Columns: []string{district.HistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &District{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{district.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
