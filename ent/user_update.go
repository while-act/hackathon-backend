// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/while-act/hackathon-backend/ent/company"
	"github.com/while-act/hackathon-backend/ent/history"
	"github.com/while-act/hackathon-backend/ent/predicate"
	"github.com/while-act/hackathon-backend/ent/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUpdateTime sets the "update_time" field.
func (uu *UserUpdate) SetUpdateTime(t time.Time) *UserUpdate {
	uu.mutation.SetUpdateTime(t)
	return uu
}

// SetRole sets the "role" field.
func (uu *UserUpdate) SetRole(s string) *UserUpdate {
	uu.mutation.SetRole(s)
	return uu
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (uu *UserUpdate) SetNillableRole(s *string) *UserUpdate {
	if s != nil {
		uu.SetRole(*s)
	}
	return uu
}

// SetName sets the "name" field.
func (uu *UserUpdate) SetName(s string) *UserUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetPasswordHash sets the "password_hash" field.
func (uu *UserUpdate) SetPasswordHash(b []byte) *UserUpdate {
	uu.mutation.SetPasswordHash(b)
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetFirstName sets the "first_name" field.
func (uu *UserUpdate) SetFirstName(s string) *UserUpdate {
	uu.mutation.SetFirstName(s)
	return uu
}

// SetLastName sets the "last_name" field.
func (uu *UserUpdate) SetLastName(s string) *UserUpdate {
	uu.mutation.SetLastName(s)
	return uu
}

// SetCompanyID sets the "company_id" field.
func (uu *UserUpdate) SetCompanyID(i int) *UserUpdate {
	uu.mutation.SetCompanyID(i)
	return uu
}

// SetFatherName sets the "father_name" field.
func (uu *UserUpdate) SetFatherName(s string) *UserUpdate {
	uu.mutation.SetFatherName(s)
	return uu
}

// SetNillableFatherName sets the "father_name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableFatherName(s *string) *UserUpdate {
	if s != nil {
		uu.SetFatherName(*s)
	}
	return uu
}

// ClearFatherName clears the value of the "father_name" field.
func (uu *UserUpdate) ClearFatherName() *UserUpdate {
	uu.mutation.ClearFatherName()
	return uu
}

// SetPosition sets the "position" field.
func (uu *UserUpdate) SetPosition(s string) *UserUpdate {
	uu.mutation.SetPosition(s)
	return uu
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePosition(s *string) *UserUpdate {
	if s != nil {
		uu.SetPosition(*s)
	}
	return uu
}

// ClearPosition clears the value of the "position" field.
func (uu *UserUpdate) ClearPosition() *UserUpdate {
	uu.mutation.ClearPosition()
	return uu
}

// SetCountry sets the "country" field.
func (uu *UserUpdate) SetCountry(s string) *UserUpdate {
	uu.mutation.SetCountry(s)
	return uu
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCountry(s *string) *UserUpdate {
	if s != nil {
		uu.SetCountry(*s)
	}
	return uu
}

// ClearCountry clears the value of the "country" field.
func (uu *UserUpdate) ClearCountry() *UserUpdate {
	uu.mutation.ClearCountry()
	return uu
}

// SetCity sets the "city" field.
func (uu *UserUpdate) SetCity(s string) *UserUpdate {
	uu.mutation.SetCity(s)
	return uu
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCity(s *string) *UserUpdate {
	if s != nil {
		uu.SetCity(*s)
	}
	return uu
}

// ClearCity clears the value of the "city" field.
func (uu *UserUpdate) ClearCity() *UserUpdate {
	uu.mutation.ClearCity()
	return uu
}

// SetBiography sets the "biography" field.
func (uu *UserUpdate) SetBiography(s string) *UserUpdate {
	uu.mutation.SetBiography(s)
	return uu
}

// SetNillableBiography sets the "biography" field if the given value is not nil.
func (uu *UserUpdate) SetNillableBiography(s *string) *UserUpdate {
	if s != nil {
		uu.SetBiography(*s)
	}
	return uu
}

// ClearBiography clears the value of the "biography" field.
func (uu *UserUpdate) ClearBiography() *UserUpdate {
	uu.mutation.ClearBiography()
	return uu
}

// SetSessions sets the "sessions" field.
func (uu *UserUpdate) SetSessions(s []string) *UserUpdate {
	uu.mutation.SetSessions(s)
	return uu
}

// AppendSessions appends s to the "sessions" field.
func (uu *UserUpdate) AppendSessions(s []string) *UserUpdate {
	uu.mutation.AppendSessions(s)
	return uu
}

// ClearSessions clears the value of the "sessions" field.
func (uu *UserUpdate) ClearSessions() *UserUpdate {
	uu.mutation.ClearSessions()
	return uu
}

// SetCompany sets the "company" edge to the Company entity.
func (uu *UserUpdate) SetCompany(c *Company) *UserUpdate {
	return uu.SetCompanyID(c.ID)
}

// AddHistoryIDs adds the "histories" edge to the History entity by IDs.
func (uu *UserUpdate) AddHistoryIDs(ids ...int) *UserUpdate {
	uu.mutation.AddHistoryIDs(ids...)
	return uu
}

// AddHistories adds the "histories" edges to the History entity.
func (uu *UserUpdate) AddHistories(h ...*History) *UserUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return uu.AddHistoryIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearCompany clears the "company" edge to the Company entity.
func (uu *UserUpdate) ClearCompany() *UserUpdate {
	uu.mutation.ClearCompany()
	return uu
}

// ClearHistories clears all "histories" edges to the History entity.
func (uu *UserUpdate) ClearHistories() *UserUpdate {
	uu.mutation.ClearHistories()
	return uu
}

// RemoveHistoryIDs removes the "histories" edge to History entities by IDs.
func (uu *UserUpdate) RemoveHistoryIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveHistoryIDs(ids...)
	return uu
}

// RemoveHistories removes "histories" edges to History entities.
func (uu *UserUpdate) RemoveHistories(h ...*History) *UserUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return uu.RemoveHistoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	if err := uu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() error {
	if _, ok := uu.mutation.UpdateTime(); !ok {
		if user.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized user.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := user.UpdateDefaultUpdateTime()
		uu.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.Name(); ok {
		if err := user.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "User.name": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uu.mutation.FirstName(); ok {
		if err := user.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "User.first_name": %w`, err)}
		}
	}
	if v, ok := uu.mutation.LastName(); ok {
		if err := user.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "User.last_name": %w`, err)}
		}
	}
	if v, ok := uu.mutation.FatherName(); ok {
		if err := user.FatherNameValidator(v); err != nil {
			return &ValidationError{Name: "father_name", err: fmt.Errorf(`ent: validator failed for field "User.father_name": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Position(); ok {
		if err := user.PositionValidator(v); err != nil {
			return &ValidationError{Name: "position", err: fmt.Errorf(`ent: validator failed for field "User.position": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Country(); ok {
		if err := user.CountryValidator(v); err != nil {
			return &ValidationError{Name: "country", err: fmt.Errorf(`ent: validator failed for field "User.country": %w`, err)}
		}
	}
	if v, ok := uu.mutation.City(); ok {
		if err := user.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "User.city": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Biography(); ok {
		if err := user.BiographyValidator(v); err != nil {
			return &ValidationError{Name: "biography", err: fmt.Errorf(`ent: validator failed for field "User.biography": %w`, err)}
		}
	}
	if _, ok := uu.mutation.CompanyID(); uu.mutation.CompanyCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "User.company"`)
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.UpdateTime(); ok {
		_spec.SetField(user.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := uu.mutation.Role(); ok {
		_spec.SetField(user.FieldRole, field.TypeString, value)
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uu.mutation.PasswordHash(); ok {
		_spec.SetField(user.FieldPasswordHash, field.TypeBytes, value)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uu.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
	}
	if value, ok := uu.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
	}
	if value, ok := uu.mutation.FatherName(); ok {
		_spec.SetField(user.FieldFatherName, field.TypeString, value)
	}
	if uu.mutation.FatherNameCleared() {
		_spec.ClearField(user.FieldFatherName, field.TypeString)
	}
	if value, ok := uu.mutation.Position(); ok {
		_spec.SetField(user.FieldPosition, field.TypeString, value)
	}
	if uu.mutation.PositionCleared() {
		_spec.ClearField(user.FieldPosition, field.TypeString)
	}
	if value, ok := uu.mutation.Country(); ok {
		_spec.SetField(user.FieldCountry, field.TypeString, value)
	}
	if uu.mutation.CountryCleared() {
		_spec.ClearField(user.FieldCountry, field.TypeString)
	}
	if value, ok := uu.mutation.City(); ok {
		_spec.SetField(user.FieldCity, field.TypeString, value)
	}
	if uu.mutation.CityCleared() {
		_spec.ClearField(user.FieldCity, field.TypeString)
	}
	if value, ok := uu.mutation.Biography(); ok {
		_spec.SetField(user.FieldBiography, field.TypeString, value)
	}
	if uu.mutation.BiographyCleared() {
		_spec.ClearField(user.FieldBiography, field.TypeString)
	}
	if value, ok := uu.mutation.Sessions(); ok {
		_spec.SetField(user.FieldSessions, field.TypeJSON, value)
	}
	if value, ok := uu.mutation.AppendedSessions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldSessions, value)
		})
	}
	if uu.mutation.SessionsCleared() {
		_spec.ClearField(user.FieldSessions, field.TypeJSON)
	}
	if uu.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   user.CompanyTable,
			Columns: []string{user.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   user.CompanyTable,
			Columns: []string{user.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.HistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.HistoriesTable,
			Columns: []string{user.HistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedHistoriesIDs(); len(nodes) > 0 && !uu.mutation.HistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.HistoriesTable,
			Columns: []string{user.HistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.HistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.HistoriesTable,
			Columns: []string{user.HistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUpdateTime sets the "update_time" field.
func (uuo *UserUpdateOne) SetUpdateTime(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdateTime(t)
	return uuo
}

// SetRole sets the "role" field.
func (uuo *UserUpdateOne) SetRole(s string) *UserUpdateOne {
	uuo.mutation.SetRole(s)
	return uuo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableRole(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetRole(*s)
	}
	return uuo
}

// SetName sets the "name" field.
func (uuo *UserUpdateOne) SetName(s string) *UserUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetPasswordHash sets the "password_hash" field.
func (uuo *UserUpdateOne) SetPasswordHash(b []byte) *UserUpdateOne {
	uuo.mutation.SetPasswordHash(b)
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetFirstName sets the "first_name" field.
func (uuo *UserUpdateOne) SetFirstName(s string) *UserUpdateOne {
	uuo.mutation.SetFirstName(s)
	return uuo
}

// SetLastName sets the "last_name" field.
func (uuo *UserUpdateOne) SetLastName(s string) *UserUpdateOne {
	uuo.mutation.SetLastName(s)
	return uuo
}

// SetCompanyID sets the "company_id" field.
func (uuo *UserUpdateOne) SetCompanyID(i int) *UserUpdateOne {
	uuo.mutation.SetCompanyID(i)
	return uuo
}

// SetFatherName sets the "father_name" field.
func (uuo *UserUpdateOne) SetFatherName(s string) *UserUpdateOne {
	uuo.mutation.SetFatherName(s)
	return uuo
}

// SetNillableFatherName sets the "father_name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableFatherName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetFatherName(*s)
	}
	return uuo
}

// ClearFatherName clears the value of the "father_name" field.
func (uuo *UserUpdateOne) ClearFatherName() *UserUpdateOne {
	uuo.mutation.ClearFatherName()
	return uuo
}

// SetPosition sets the "position" field.
func (uuo *UserUpdateOne) SetPosition(s string) *UserUpdateOne {
	uuo.mutation.SetPosition(s)
	return uuo
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePosition(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPosition(*s)
	}
	return uuo
}

// ClearPosition clears the value of the "position" field.
func (uuo *UserUpdateOne) ClearPosition() *UserUpdateOne {
	uuo.mutation.ClearPosition()
	return uuo
}

// SetCountry sets the "country" field.
func (uuo *UserUpdateOne) SetCountry(s string) *UserUpdateOne {
	uuo.mutation.SetCountry(s)
	return uuo
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCountry(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetCountry(*s)
	}
	return uuo
}

// ClearCountry clears the value of the "country" field.
func (uuo *UserUpdateOne) ClearCountry() *UserUpdateOne {
	uuo.mutation.ClearCountry()
	return uuo
}

// SetCity sets the "city" field.
func (uuo *UserUpdateOne) SetCity(s string) *UserUpdateOne {
	uuo.mutation.SetCity(s)
	return uuo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCity(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetCity(*s)
	}
	return uuo
}

// ClearCity clears the value of the "city" field.
func (uuo *UserUpdateOne) ClearCity() *UserUpdateOne {
	uuo.mutation.ClearCity()
	return uuo
}

// SetBiography sets the "biography" field.
func (uuo *UserUpdateOne) SetBiography(s string) *UserUpdateOne {
	uuo.mutation.SetBiography(s)
	return uuo
}

// SetNillableBiography sets the "biography" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBiography(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetBiography(*s)
	}
	return uuo
}

// ClearBiography clears the value of the "biography" field.
func (uuo *UserUpdateOne) ClearBiography() *UserUpdateOne {
	uuo.mutation.ClearBiography()
	return uuo
}

// SetSessions sets the "sessions" field.
func (uuo *UserUpdateOne) SetSessions(s []string) *UserUpdateOne {
	uuo.mutation.SetSessions(s)
	return uuo
}

// AppendSessions appends s to the "sessions" field.
func (uuo *UserUpdateOne) AppendSessions(s []string) *UserUpdateOne {
	uuo.mutation.AppendSessions(s)
	return uuo
}

// ClearSessions clears the value of the "sessions" field.
func (uuo *UserUpdateOne) ClearSessions() *UserUpdateOne {
	uuo.mutation.ClearSessions()
	return uuo
}

// SetCompany sets the "company" edge to the Company entity.
func (uuo *UserUpdateOne) SetCompany(c *Company) *UserUpdateOne {
	return uuo.SetCompanyID(c.ID)
}

// AddHistoryIDs adds the "histories" edge to the History entity by IDs.
func (uuo *UserUpdateOne) AddHistoryIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddHistoryIDs(ids...)
	return uuo
}

// AddHistories adds the "histories" edges to the History entity.
func (uuo *UserUpdateOne) AddHistories(h ...*History) *UserUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return uuo.AddHistoryIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearCompany clears the "company" edge to the Company entity.
func (uuo *UserUpdateOne) ClearCompany() *UserUpdateOne {
	uuo.mutation.ClearCompany()
	return uuo
}

// ClearHistories clears all "histories" edges to the History entity.
func (uuo *UserUpdateOne) ClearHistories() *UserUpdateOne {
	uuo.mutation.ClearHistories()
	return uuo
}

// RemoveHistoryIDs removes the "histories" edge to History entities by IDs.
func (uuo *UserUpdateOne) RemoveHistoryIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveHistoryIDs(ids...)
	return uuo
}

// RemoveHistories removes "histories" edges to History entities.
func (uuo *UserUpdateOne) RemoveHistories(h ...*History) *UserUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return uuo.RemoveHistoryIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	if err := uuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() error {
	if _, ok := uuo.mutation.UpdateTime(); !ok {
		if user.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized user.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := user.UpdateDefaultUpdateTime()
		uuo.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.Name(); ok {
		if err := user.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "User.name": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.FirstName(); ok {
		if err := user.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "User.first_name": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.LastName(); ok {
		if err := user.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "User.last_name": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.FatherName(); ok {
		if err := user.FatherNameValidator(v); err != nil {
			return &ValidationError{Name: "father_name", err: fmt.Errorf(`ent: validator failed for field "User.father_name": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Position(); ok {
		if err := user.PositionValidator(v); err != nil {
			return &ValidationError{Name: "position", err: fmt.Errorf(`ent: validator failed for field "User.position": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Country(); ok {
		if err := user.CountryValidator(v); err != nil {
			return &ValidationError{Name: "country", err: fmt.Errorf(`ent: validator failed for field "User.country": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.City(); ok {
		if err := user.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "User.city": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Biography(); ok {
		if err := user.BiographyValidator(v); err != nil {
			return &ValidationError{Name: "biography", err: fmt.Errorf(`ent: validator failed for field "User.biography": %w`, err)}
		}
	}
	if _, ok := uuo.mutation.CompanyID(); uuo.mutation.CompanyCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "User.company"`)
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.UpdateTime(); ok {
		_spec.SetField(user.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.Role(); ok {
		_spec.SetField(user.FieldRole, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.PasswordHash(); ok {
		_spec.SetField(user.FieldPasswordHash, field.TypeBytes, value)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uuo.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.FatherName(); ok {
		_spec.SetField(user.FieldFatherName, field.TypeString, value)
	}
	if uuo.mutation.FatherNameCleared() {
		_spec.ClearField(user.FieldFatherName, field.TypeString)
	}
	if value, ok := uuo.mutation.Position(); ok {
		_spec.SetField(user.FieldPosition, field.TypeString, value)
	}
	if uuo.mutation.PositionCleared() {
		_spec.ClearField(user.FieldPosition, field.TypeString)
	}
	if value, ok := uuo.mutation.Country(); ok {
		_spec.SetField(user.FieldCountry, field.TypeString, value)
	}
	if uuo.mutation.CountryCleared() {
		_spec.ClearField(user.FieldCountry, field.TypeString)
	}
	if value, ok := uuo.mutation.City(); ok {
		_spec.SetField(user.FieldCity, field.TypeString, value)
	}
	if uuo.mutation.CityCleared() {
		_spec.ClearField(user.FieldCity, field.TypeString)
	}
	if value, ok := uuo.mutation.Biography(); ok {
		_spec.SetField(user.FieldBiography, field.TypeString, value)
	}
	if uuo.mutation.BiographyCleared() {
		_spec.ClearField(user.FieldBiography, field.TypeString)
	}
	if value, ok := uuo.mutation.Sessions(); ok {
		_spec.SetField(user.FieldSessions, field.TypeJSON, value)
	}
	if value, ok := uuo.mutation.AppendedSessions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldSessions, value)
		})
	}
	if uuo.mutation.SessionsCleared() {
		_spec.ClearField(user.FieldSessions, field.TypeJSON)
	}
	if uuo.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   user.CompanyTable,
			Columns: []string{user.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   user.CompanyTable,
			Columns: []string{user.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.HistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.HistoriesTable,
			Columns: []string{user.HistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedHistoriesIDs(); len(nodes) > 0 && !uuo.mutation.HistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.HistoriesTable,
			Columns: []string{user.HistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.HistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.HistoriesTable,
			Columns: []string{user.HistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(history.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
