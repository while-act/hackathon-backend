// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/while-act/hackathon-backend/ent/businessactivity"
	"github.com/while-act/hackathon-backend/ent/history"
	"github.com/while-act/hackathon-backend/ent/predicate"
)

// BusinessActivityQuery is the builder for querying BusinessActivity entities.
type BusinessActivityQuery struct {
	config
	ctx           *QueryContext
	order         []businessactivity.OrderOption
	inters        []Interceptor
	predicates    []predicate.BusinessActivity
	withHistories *HistoryQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the BusinessActivityQuery builder.
func (baq *BusinessActivityQuery) Where(ps ...predicate.BusinessActivity) *BusinessActivityQuery {
	baq.predicates = append(baq.predicates, ps...)
	return baq
}

// Limit the number of records to be returned by this query.
func (baq *BusinessActivityQuery) Limit(limit int) *BusinessActivityQuery {
	baq.ctx.Limit = &limit
	return baq
}

// Offset to start from.
func (baq *BusinessActivityQuery) Offset(offset int) *BusinessActivityQuery {
	baq.ctx.Offset = &offset
	return baq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (baq *BusinessActivityQuery) Unique(unique bool) *BusinessActivityQuery {
	baq.ctx.Unique = &unique
	return baq
}

// Order specifies how the records should be ordered.
func (baq *BusinessActivityQuery) Order(o ...businessactivity.OrderOption) *BusinessActivityQuery {
	baq.order = append(baq.order, o...)
	return baq
}

// QueryHistories chains the current query on the "histories" edge.
func (baq *BusinessActivityQuery) QueryHistories() *HistoryQuery {
	query := (&HistoryClient{config: baq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := baq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := baq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(businessactivity.Table, businessactivity.FieldID, selector),
			sqlgraph.To(history.Table, history.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, businessactivity.HistoriesTable, businessactivity.HistoriesColumn),
		)
		fromU = sqlgraph.SetNeighbors(baq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first BusinessActivity entity from the query.
// Returns a *NotFoundError when no BusinessActivity was found.
func (baq *BusinessActivityQuery) First(ctx context.Context) (*BusinessActivity, error) {
	nodes, err := baq.Limit(1).All(setContextOp(ctx, baq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{businessactivity.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (baq *BusinessActivityQuery) FirstX(ctx context.Context) *BusinessActivity {
	node, err := baq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first BusinessActivity ID from the query.
// Returns a *NotFoundError when no BusinessActivity ID was found.
func (baq *BusinessActivityQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = baq.Limit(1).IDs(setContextOp(ctx, baq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{businessactivity.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (baq *BusinessActivityQuery) FirstIDX(ctx context.Context) int {
	id, err := baq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single BusinessActivity entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one BusinessActivity entity is found.
// Returns a *NotFoundError when no BusinessActivity entities are found.
func (baq *BusinessActivityQuery) Only(ctx context.Context) (*BusinessActivity, error) {
	nodes, err := baq.Limit(2).All(setContextOp(ctx, baq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{businessactivity.Label}
	default:
		return nil, &NotSingularError{businessactivity.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (baq *BusinessActivityQuery) OnlyX(ctx context.Context) *BusinessActivity {
	node, err := baq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only BusinessActivity ID in the query.
// Returns a *NotSingularError when more than one BusinessActivity ID is found.
// Returns a *NotFoundError when no entities are found.
func (baq *BusinessActivityQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = baq.Limit(2).IDs(setContextOp(ctx, baq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{businessactivity.Label}
	default:
		err = &NotSingularError{businessactivity.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (baq *BusinessActivityQuery) OnlyIDX(ctx context.Context) int {
	id, err := baq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of BusinessActivities.
func (baq *BusinessActivityQuery) All(ctx context.Context) ([]*BusinessActivity, error) {
	ctx = setContextOp(ctx, baq.ctx, "All")
	if err := baq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*BusinessActivity, *BusinessActivityQuery]()
	return withInterceptors[[]*BusinessActivity](ctx, baq, qr, baq.inters)
}

// AllX is like All, but panics if an error occurs.
func (baq *BusinessActivityQuery) AllX(ctx context.Context) []*BusinessActivity {
	nodes, err := baq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of BusinessActivity IDs.
func (baq *BusinessActivityQuery) IDs(ctx context.Context) (ids []int, err error) {
	if baq.ctx.Unique == nil && baq.path != nil {
		baq.Unique(true)
	}
	ctx = setContextOp(ctx, baq.ctx, "IDs")
	if err = baq.Select(businessactivity.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (baq *BusinessActivityQuery) IDsX(ctx context.Context) []int {
	ids, err := baq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (baq *BusinessActivityQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, baq.ctx, "Count")
	if err := baq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, baq, querierCount[*BusinessActivityQuery](), baq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (baq *BusinessActivityQuery) CountX(ctx context.Context) int {
	count, err := baq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (baq *BusinessActivityQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, baq.ctx, "Exist")
	switch _, err := baq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (baq *BusinessActivityQuery) ExistX(ctx context.Context) bool {
	exist, err := baq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the BusinessActivityQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (baq *BusinessActivityQuery) Clone() *BusinessActivityQuery {
	if baq == nil {
		return nil
	}
	return &BusinessActivityQuery{
		config:        baq.config,
		ctx:           baq.ctx.Clone(),
		order:         append([]businessactivity.OrderOption{}, baq.order...),
		inters:        append([]Interceptor{}, baq.inters...),
		predicates:    append([]predicate.BusinessActivity{}, baq.predicates...),
		withHistories: baq.withHistories.Clone(),
		// clone intermediate query.
		sql:  baq.sql.Clone(),
		path: baq.path,
	}
}

// WithHistories tells the query-builder to eager-load the nodes that are connected to
// the "histories" edge. The optional arguments are used to configure the query builder of the edge.
func (baq *BusinessActivityQuery) WithHistories(opts ...func(*HistoryQuery)) *BusinessActivityQuery {
	query := (&HistoryClient{config: baq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	baq.withHistories = query
	return baq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Type string `json:"type,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.BusinessActivity.Query().
//		GroupBy(businessactivity.FieldType).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (baq *BusinessActivityQuery) GroupBy(field string, fields ...string) *BusinessActivityGroupBy {
	baq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &BusinessActivityGroupBy{build: baq}
	grbuild.flds = &baq.ctx.Fields
	grbuild.label = businessactivity.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Type string `json:"type,omitempty"`
//	}
//
//	client.BusinessActivity.Query().
//		Select(businessactivity.FieldType).
//		Scan(ctx, &v)
func (baq *BusinessActivityQuery) Select(fields ...string) *BusinessActivitySelect {
	baq.ctx.Fields = append(baq.ctx.Fields, fields...)
	sbuild := &BusinessActivitySelect{BusinessActivityQuery: baq}
	sbuild.label = businessactivity.Label
	sbuild.flds, sbuild.scan = &baq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a BusinessActivitySelect configured with the given aggregations.
func (baq *BusinessActivityQuery) Aggregate(fns ...AggregateFunc) *BusinessActivitySelect {
	return baq.Select().Aggregate(fns...)
}

func (baq *BusinessActivityQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range baq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, baq); err != nil {
				return err
			}
		}
	}
	for _, f := range baq.ctx.Fields {
		if !businessactivity.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if baq.path != nil {
		prev, err := baq.path(ctx)
		if err != nil {
			return err
		}
		baq.sql = prev
	}
	return nil
}

func (baq *BusinessActivityQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*BusinessActivity, error) {
	var (
		nodes       = []*BusinessActivity{}
		_spec       = baq.querySpec()
		loadedTypes = [1]bool{
			baq.withHistories != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*BusinessActivity).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &BusinessActivity{config: baq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, baq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := baq.withHistories; query != nil {
		if err := baq.loadHistories(ctx, query, nodes,
			func(n *BusinessActivity) { n.Edges.Histories = []*History{} },
			func(n *BusinessActivity, e *History) { n.Edges.Histories = append(n.Edges.Histories, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (baq *BusinessActivityQuery) loadHistories(ctx context.Context, query *HistoryQuery, nodes []*BusinessActivity, init func(*BusinessActivity), assign func(*BusinessActivity, *History)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*BusinessActivity)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(history.FieldBusinessActivityID)
	}
	query.Where(predicate.History(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(businessactivity.HistoriesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.BusinessActivityID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "business_activity_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (baq *BusinessActivityQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := baq.querySpec()
	_spec.Node.Columns = baq.ctx.Fields
	if len(baq.ctx.Fields) > 0 {
		_spec.Unique = baq.ctx.Unique != nil && *baq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, baq.driver, _spec)
}

func (baq *BusinessActivityQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(businessactivity.Table, businessactivity.Columns, sqlgraph.NewFieldSpec(businessactivity.FieldID, field.TypeInt))
	_spec.From = baq.sql
	if unique := baq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if baq.path != nil {
		_spec.Unique = true
	}
	if fields := baq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, businessactivity.FieldID)
		for i := range fields {
			if fields[i] != businessactivity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := baq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := baq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := baq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := baq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (baq *BusinessActivityQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(baq.driver.Dialect())
	t1 := builder.Table(businessactivity.Table)
	columns := baq.ctx.Fields
	if len(columns) == 0 {
		columns = businessactivity.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if baq.sql != nil {
		selector = baq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if baq.ctx.Unique != nil && *baq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range baq.predicates {
		p(selector)
	}
	for _, p := range baq.order {
		p(selector)
	}
	if offset := baq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := baq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// BusinessActivityGroupBy is the group-by builder for BusinessActivity entities.
type BusinessActivityGroupBy struct {
	selector
	build *BusinessActivityQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (bagb *BusinessActivityGroupBy) Aggregate(fns ...AggregateFunc) *BusinessActivityGroupBy {
	bagb.fns = append(bagb.fns, fns...)
	return bagb
}

// Scan applies the selector query and scans the result into the given value.
func (bagb *BusinessActivityGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bagb.build.ctx, "GroupBy")
	if err := bagb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BusinessActivityQuery, *BusinessActivityGroupBy](ctx, bagb.build, bagb, bagb.build.inters, v)
}

func (bagb *BusinessActivityGroupBy) sqlScan(ctx context.Context, root *BusinessActivityQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(bagb.fns))
	for _, fn := range bagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*bagb.flds)+len(bagb.fns))
		for _, f := range *bagb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*bagb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bagb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// BusinessActivitySelect is the builder for selecting fields of BusinessActivity entities.
type BusinessActivitySelect struct {
	*BusinessActivityQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (bas *BusinessActivitySelect) Aggregate(fns ...AggregateFunc) *BusinessActivitySelect {
	bas.fns = append(bas.fns, fns...)
	return bas
}

// Scan applies the selector query and scans the result into the given value.
func (bas *BusinessActivitySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bas.ctx, "Select")
	if err := bas.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BusinessActivityQuery, *BusinessActivitySelect](ctx, bas.BusinessActivityQuery, bas, bas.inters, v)
}

func (bas *BusinessActivitySelect) sqlScan(ctx context.Context, root *BusinessActivityQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(bas.fns))
	for _, fn := range bas.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*bas.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
