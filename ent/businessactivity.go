// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/while-act/hackathon-backend/ent/businessactivity"
)

// BusinessActivity is the model entity for the BusinessActivity schema.
type BusinessActivity struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// SubType holds the value of the "sub_type" field.
	SubType string `json:"sub_type,omitempty"`
	// Total holds the value of the "total" field.
	Total float64 `json:"total,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BusinessActivityQuery when eager-loading is set.
	Edges        BusinessActivityEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BusinessActivityEdges holds the relations/edges for other nodes in the graph.
type BusinessActivityEdges struct {
	// Histories holds the value of the histories edge.
	Histories []*History `json:"histories,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// HistoriesOrErr returns the Histories value or an error if the edge
// was not loaded in eager-loading.
func (e BusinessActivityEdges) HistoriesOrErr() ([]*History, error) {
	if e.loadedTypes[0] {
		return e.Histories, nil
	}
	return nil, &NotLoadedError{edge: "histories"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BusinessActivity) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case businessactivity.FieldTotal:
			values[i] = new(sql.NullFloat64)
		case businessactivity.FieldID:
			values[i] = new(sql.NullInt64)
		case businessactivity.FieldType, businessactivity.FieldSubType:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BusinessActivity fields.
func (ba *BusinessActivity) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case businessactivity.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ba.ID = int(value.Int64)
		case businessactivity.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ba.Type = value.String
			}
		case businessactivity.FieldSubType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sub_type", values[i])
			} else if value.Valid {
				ba.SubType = value.String
			}
		case businessactivity.FieldTotal:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field total", values[i])
			} else if value.Valid {
				ba.Total = value.Float64
			}
		default:
			ba.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BusinessActivity.
// This includes values selected through modifiers, order, etc.
func (ba *BusinessActivity) Value(name string) (ent.Value, error) {
	return ba.selectValues.Get(name)
}

// QueryHistories queries the "histories" edge of the BusinessActivity entity.
func (ba *BusinessActivity) QueryHistories() *HistoryQuery {
	return NewBusinessActivityClient(ba.config).QueryHistories(ba)
}

// Update returns a builder for updating this BusinessActivity.
// Note that you need to call BusinessActivity.Unwrap() before calling this method if this BusinessActivity
// was returned from a transaction, and the transaction was committed or rolled back.
func (ba *BusinessActivity) Update() *BusinessActivityUpdateOne {
	return NewBusinessActivityClient(ba.config).UpdateOne(ba)
}

// Unwrap unwraps the BusinessActivity entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ba *BusinessActivity) Unwrap() *BusinessActivity {
	_tx, ok := ba.config.driver.(*txDriver)
	if !ok {
		panic("ent: BusinessActivityId is not a transactional entity")
	}
	ba.config.driver = _tx.drv
	return ba
}

// String implements the fmt.Stringer.
func (ba *BusinessActivity) String() string {
	var builder strings.Builder
	builder.WriteString("BusinessActivityId(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ba.ID))
	builder.WriteString("type=")
	builder.WriteString(ba.Type)
	builder.WriteString(", ")
	builder.WriteString("sub_type=")
	builder.WriteString(ba.SubType)
	builder.WriteString(", ")
	builder.WriteString("total=")
	builder.WriteString(fmt.Sprintf("%v", ba.Total))
	builder.WriteByte(')')
	return builder.String()
}

// BusinessActivities is a parsable slice of BusinessActivity.
type BusinessActivities []*BusinessActivity
