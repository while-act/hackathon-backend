// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/while-act/hackathon-backend/ent/businessactivity"
	"github.com/while-act/hackathon-backend/ent/district"
	"github.com/while-act/hackathon-backend/ent/history"
	"github.com/while-act/hackathon-backend/ent/industry"
	"github.com/while-act/hackathon-backend/ent/taxationsystem"
	"github.com/while-act/hackathon-backend/ent/user"
	"github.com/while-act/hackathon-backend/internal/controller/dto"
)

// HistoryCreate is the builder for creating a History entity.
type HistoryCreate struct {
	config
	mutation *HistoryMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (hc *HistoryCreate) SetName(s string) *HistoryCreate {
	hc.mutation.SetName(s)
	return hc
}

// SetOrganizationalLegal sets the "organizational_legal" field.
func (hc *HistoryCreate) SetOrganizationalLegal(s string) *HistoryCreate {
	hc.mutation.SetOrganizationalLegal(s)
	return hc
}

// SetIndustryBranch sets the "industry_branch" field.
func (hc *HistoryCreate) SetIndustryBranch(s string) *HistoryCreate {
	hc.mutation.SetIndustryBranch(s)
	return hc
}

// SetFullTimeEmployees sets the "full_time_employees" field.
func (hc *HistoryCreate) SetFullTimeEmployees(i int) *HistoryCreate {
	hc.mutation.SetFullTimeEmployees(i)
	return hc
}

// SetAvgSalary sets the "avg_salary" field.
func (hc *HistoryCreate) SetAvgSalary(f float64) *HistoryCreate {
	hc.mutation.SetAvgSalary(f)
	return hc
}

// SetDistrictTitle sets the "district_title" field.
func (hc *HistoryCreate) SetDistrictTitle(s string) *HistoryCreate {
	hc.mutation.SetDistrictTitle(s)
	return hc
}

// SetLandArea sets the "land_area" field.
func (hc *HistoryCreate) SetLandArea(f float64) *HistoryCreate {
	hc.mutation.SetLandArea(f)
	return hc
}

// SetIsBuy sets the "is_buy" field.
func (hc *HistoryCreate) SetIsBuy(b bool) *HistoryCreate {
	hc.mutation.SetIsBuy(b)
	return hc
}

// SetConstructionFacilitiesArea sets the "construction_facilities_area" field.
func (hc *HistoryCreate) SetConstructionFacilitiesArea(f float64) *HistoryCreate {
	hc.mutation.SetConstructionFacilitiesArea(f)
	return hc
}

// SetBuildingType sets the "building_type" field.
func (hc *HistoryCreate) SetBuildingType(s []string) *HistoryCreate {
	hc.mutation.SetBuildingType(s)
	return hc
}

// SetEquipment sets the "equipment" field.
func (hc *HistoryCreate) SetEquipment(d []dto.Equipment) *HistoryCreate {
	hc.mutation.SetEquipment(d)
	return hc
}

// SetAccountingSupport sets the "accounting_support" field.
func (hc *HistoryCreate) SetAccountingSupport(b bool) *HistoryCreate {
	hc.mutation.SetAccountingSupport(b)
	return hc
}

// SetTaxationSystemOperations sets the "taxation_system_operations" field.
func (hc *HistoryCreate) SetTaxationSystemOperations(i int) *HistoryCreate {
	hc.mutation.SetTaxationSystemOperations(i)
	return hc
}

// SetNillableTaxationSystemOperations sets the "taxation_system_operations" field if the given value is not nil.
func (hc *HistoryCreate) SetNillableTaxationSystemOperations(i *int) *HistoryCreate {
	if i != nil {
		hc.SetTaxationSystemOperations(*i)
	}
	return hc
}

// SetOperationType sets the "operation_type" field.
func (hc *HistoryCreate) SetOperationType(s string) *HistoryCreate {
	hc.mutation.SetOperationType(s)
	return hc
}

// SetNillableOperationType sets the "operation_type" field if the given value is not nil.
func (hc *HistoryCreate) SetNillableOperationType(s *string) *HistoryCreate {
	if s != nil {
		hc.SetOperationType(*s)
	}
	return hc
}

// SetPatentCalc sets the "patent_calc" field.
func (hc *HistoryCreate) SetPatentCalc(b bool) *HistoryCreate {
	hc.mutation.SetPatentCalc(b)
	return hc
}

// SetBusinessActivityID sets the "business_activity_id" field.
func (hc *HistoryCreate) SetBusinessActivityID(i int) *HistoryCreate {
	hc.mutation.SetBusinessActivityID(i)
	return hc
}

// SetNillableBusinessActivityID sets the "business_activity_id" field if the given value is not nil.
func (hc *HistoryCreate) SetNillableBusinessActivityID(i *int) *HistoryCreate {
	if i != nil {
		hc.SetBusinessActivityID(*i)
	}
	return hc
}

// SetOther sets the "other" field.
func (hc *HistoryCreate) SetOther(s string) *HistoryCreate {
	hc.mutation.SetOther(s)
	return hc
}

// SetNillableOther sets the "other" field if the given value is not nil.
func (hc *HistoryCreate) SetNillableOther(s *string) *HistoryCreate {
	if s != nil {
		hc.SetOther(*s)
	}
	return hc
}

// SetUserID sets the "user_id" field.
func (hc *HistoryCreate) SetUserID(i int) *HistoryCreate {
	hc.mutation.SetUserID(i)
	return hc
}

// SetIndustryID sets the "industry" edge to the Industry entity by ID.
func (hc *HistoryCreate) SetIndustryID(id string) *HistoryCreate {
	hc.mutation.SetIndustryID(id)
	return hc
}

// SetIndustry sets the "industry" edge to the Industry entity.
func (hc *HistoryCreate) SetIndustry(i *Industry) *HistoryCreate {
	return hc.SetIndustryID(i.ID)
}

// SetTaxationSystemsID sets the "taxation_systems" edge to the TaxationSystem entity by ID.
func (hc *HistoryCreate) SetTaxationSystemsID(id int) *HistoryCreate {
	hc.mutation.SetTaxationSystemsID(id)
	return hc
}

// SetNillableTaxationSystemsID sets the "taxation_systems" edge to the TaxationSystem entity by ID if the given value is not nil.
func (hc *HistoryCreate) SetNillableTaxationSystemsID(id *int) *HistoryCreate {
	if id != nil {
		hc = hc.SetTaxationSystemsID(*id)
	}
	return hc
}

// SetTaxationSystems sets the "taxation_systems" edge to the TaxationSystem entity.
func (hc *HistoryCreate) SetTaxationSystems(t *TaxationSystem) *HistoryCreate {
	return hc.SetTaxationSystemsID(t.ID)
}

// SetBusinessActivity sets the "business_activity" edge to the BusinessActivity entity.
func (hc *HistoryCreate) SetBusinessActivity(b *BusinessActivity) *HistoryCreate {
	return hc.SetBusinessActivityID(b.ID)
}

// SetDistrictID sets the "district" edge to the District entity by ID.
func (hc *HistoryCreate) SetDistrictID(id string) *HistoryCreate {
	hc.mutation.SetDistrictID(id)
	return hc
}

// SetDistrict sets the "district" edge to the District entity.
func (hc *HistoryCreate) SetDistrict(d *District) *HistoryCreate {
	return hc.SetDistrictID(d.ID)
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (hc *HistoryCreate) SetUsersID(id int) *HistoryCreate {
	hc.mutation.SetUsersID(id)
	return hc
}

// SetUsers sets the "users" edge to the User entity.
func (hc *HistoryCreate) SetUsers(u *User) *HistoryCreate {
	return hc.SetUsersID(u.ID)
}

// Mutation returns the HistoryMutation object of the builder.
func (hc *HistoryCreate) Mutation() *HistoryMutation {
	return hc.mutation
}

// Save creates the History in the database.
func (hc *HistoryCreate) Save(ctx context.Context) (*History, error) {
	return withHooks(ctx, hc.sqlSave, hc.mutation, hc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hc *HistoryCreate) SaveX(ctx context.Context) *History {
	v, err := hc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hc *HistoryCreate) Exec(ctx context.Context) error {
	_, err := hc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hc *HistoryCreate) ExecX(ctx context.Context) {
	if err := hc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hc *HistoryCreate) check() error {
	if _, ok := hc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "History.name"`)}
	}
	if v, ok := hc.mutation.Name(); ok {
		if err := history.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "History.name": %w`, err)}
		}
	}
	if _, ok := hc.mutation.OrganizationalLegal(); !ok {
		return &ValidationError{Name: "organizational_legal", err: errors.New(`ent: missing required field "History.organizational_legal"`)}
	}
	if _, ok := hc.mutation.IndustryBranch(); !ok {
		return &ValidationError{Name: "industry_branch", err: errors.New(`ent: missing required field "History.industry_branch"`)}
	}
	if _, ok := hc.mutation.FullTimeEmployees(); !ok {
		return &ValidationError{Name: "full_time_employees", err: errors.New(`ent: missing required field "History.full_time_employees"`)}
	}
	if v, ok := hc.mutation.FullTimeEmployees(); ok {
		if err := history.FullTimeEmployeesValidator(v); err != nil {
			return &ValidationError{Name: "full_time_employees", err: fmt.Errorf(`ent: validator failed for field "History.full_time_employees": %w`, err)}
		}
	}
	if _, ok := hc.mutation.AvgSalary(); !ok {
		return &ValidationError{Name: "avg_salary", err: errors.New(`ent: missing required field "History.avg_salary"`)}
	}
	if _, ok := hc.mutation.DistrictTitle(); !ok {
		return &ValidationError{Name: "district_title", err: errors.New(`ent: missing required field "History.district_title"`)}
	}
	if _, ok := hc.mutation.LandArea(); !ok {
		return &ValidationError{Name: "land_area", err: errors.New(`ent: missing required field "History.land_area"`)}
	}
	if v, ok := hc.mutation.LandArea(); ok {
		if err := history.LandAreaValidator(v); err != nil {
			return &ValidationError{Name: "land_area", err: fmt.Errorf(`ent: validator failed for field "History.land_area": %w`, err)}
		}
	}
	if _, ok := hc.mutation.IsBuy(); !ok {
		return &ValidationError{Name: "is_buy", err: errors.New(`ent: missing required field "History.is_buy"`)}
	}
	if _, ok := hc.mutation.ConstructionFacilitiesArea(); !ok {
		return &ValidationError{Name: "construction_facilities_area", err: errors.New(`ent: missing required field "History.construction_facilities_area"`)}
	}
	if v, ok := hc.mutation.ConstructionFacilitiesArea(); ok {
		if err := history.ConstructionFacilitiesAreaValidator(v); err != nil {
			return &ValidationError{Name: "construction_facilities_area", err: fmt.Errorf(`ent: validator failed for field "History.construction_facilities_area": %w`, err)}
		}
	}
	if _, ok := hc.mutation.BuildingType(); !ok {
		return &ValidationError{Name: "building_type", err: errors.New(`ent: missing required field "History.building_type"`)}
	}
	if _, ok := hc.mutation.Equipment(); !ok {
		return &ValidationError{Name: "equipment", err: errors.New(`ent: missing required field "History.equipment"`)}
	}
	if _, ok := hc.mutation.AccountingSupport(); !ok {
		return &ValidationError{Name: "accounting_support", err: errors.New(`ent: missing required field "History.accounting_support"`)}
	}
	if _, ok := hc.mutation.PatentCalc(); !ok {
		return &ValidationError{Name: "patent_calc", err: errors.New(`ent: missing required field "History.patent_calc"`)}
	}
	if _, ok := hc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "History.user_id"`)}
	}
	if _, ok := hc.mutation.IndustryID(); !ok {
		return &ValidationError{Name: "industry", err: errors.New(`ent: missing required edge "History.industry"`)}
	}
	if _, ok := hc.mutation.DistrictID(); !ok {
		return &ValidationError{Name: "district", err: errors.New(`ent: missing required edge "History.district"`)}
	}
	if _, ok := hc.mutation.UsersID(); !ok {
		return &ValidationError{Name: "users", err: errors.New(`ent: missing required edge "History.users"`)}
	}
	return nil
}

func (hc *HistoryCreate) sqlSave(ctx context.Context) (*History, error) {
	if err := hc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	hc.mutation.id = &_node.ID
	hc.mutation.done = true
	return _node, nil
}

func (hc *HistoryCreate) createSpec() (*History, *sqlgraph.CreateSpec) {
	var (
		_node = &History{config: hc.config}
		_spec = sqlgraph.NewCreateSpec(history.Table, sqlgraph.NewFieldSpec(history.FieldID, field.TypeInt))
	)
	if value, ok := hc.mutation.Name(); ok {
		_spec.SetField(history.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := hc.mutation.OrganizationalLegal(); ok {
		_spec.SetField(history.FieldOrganizationalLegal, field.TypeString, value)
		_node.OrganizationalLegal = value
	}
	if value, ok := hc.mutation.FullTimeEmployees(); ok {
		_spec.SetField(history.FieldFullTimeEmployees, field.TypeInt, value)
		_node.FullTimeEmployees = value
	}
	if value, ok := hc.mutation.AvgSalary(); ok {
		_spec.SetField(history.FieldAvgSalary, field.TypeFloat64, value)
		_node.AvgSalary = value
	}
	if value, ok := hc.mutation.LandArea(); ok {
		_spec.SetField(history.FieldLandArea, field.TypeFloat64, value)
		_node.LandArea = value
	}
	if value, ok := hc.mutation.IsBuy(); ok {
		_spec.SetField(history.FieldIsBuy, field.TypeBool, value)
		_node.IsBuy = value
	}
	if value, ok := hc.mutation.ConstructionFacilitiesArea(); ok {
		_spec.SetField(history.FieldConstructionFacilitiesArea, field.TypeFloat64, value)
		_node.ConstructionFacilitiesArea = value
	}
	if value, ok := hc.mutation.BuildingType(); ok {
		_spec.SetField(history.FieldBuildingType, field.TypeJSON, value)
		_node.BuildingType = value
	}
	if value, ok := hc.mutation.Equipment(); ok {
		_spec.SetField(history.FieldEquipment, field.TypeJSON, value)
		_node.Equipment = value
	}
	if value, ok := hc.mutation.AccountingSupport(); ok {
		_spec.SetField(history.FieldAccountingSupport, field.TypeBool, value)
		_node.AccountingSupport = value
	}
	if value, ok := hc.mutation.OperationType(); ok {
		_spec.SetField(history.FieldOperationType, field.TypeString, value)
		_node.OperationType = value
	}
	if value, ok := hc.mutation.PatentCalc(); ok {
		_spec.SetField(history.FieldPatentCalc, field.TypeBool, value)
		_node.PatentCalc = value
	}
	if value, ok := hc.mutation.Other(); ok {
		_spec.SetField(history.FieldOther, field.TypeString, value)
		_node.Other = value
	}
	if nodes := hc.mutation.IndustryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   history.IndustryTable,
			Columns: []string{history.IndustryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(industry.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.IndustryBranch = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hc.mutation.TaxationSystemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   history.TaxationSystemsTable,
			Columns: []string{history.TaxationSystemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(taxationsystem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TaxationSystemOperations = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hc.mutation.BusinessActivityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   history.BusinessActivityTable,
			Columns: []string{history.BusinessActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessactivity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BusinessActivityID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hc.mutation.DistrictIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   history.DistrictTable,
			Columns: []string{history.DistrictColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(district.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DistrictTitle = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   history.UsersTable,
			Columns: []string{history.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// HistoryCreateBulk is the builder for creating many History entities in bulk.
type HistoryCreateBulk struct {
	config
	builders []*HistoryCreate
}

// Save creates the History entities in the database.
func (hcb *HistoryCreateBulk) Save(ctx context.Context) ([]*History, error) {
	specs := make([]*sqlgraph.CreateSpec, len(hcb.builders))
	nodes := make([]*History, len(hcb.builders))
	mutators := make([]Mutator, len(hcb.builders))
	for i := range hcb.builders {
		func(i int, root context.Context) {
			builder := hcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hcb *HistoryCreateBulk) SaveX(ctx context.Context) []*History {
	v, err := hcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hcb *HistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := hcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hcb *HistoryCreateBulk) ExecX(ctx context.Context) {
	if err := hcb.Exec(ctx); err != nil {
		panic(err)
	}
}
